"use strict";(self.webpackChunk_CapybaraIO_docs=self.webpackChunk_CapybaraIO_docs||[]).push([[2484],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),h=o,k=p["".concat(s,".").concat(h)]||p[h]||u[h]||i;return t?a.createElement(k,r(r({ref:n},d),{},{components:t})):a.createElement(k,r({ref:n},d))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=h;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},91011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={title:"How to Run a Mainnet Node"},r=void 0,l={unversionedId:"stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node",id:"stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node",title:"How to Run a Mainnet Node",description:"This guide shows you how to run a local mainnet node using Docker images.",source:"@site/docs/stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node.md",sourceDirName:"stacks-blockchain-api/how-to-guides",slug:"/stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node",permalink:"/doc/stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/stacks-blockchain-api/how-to-guides/how-to-run-mainnet-node.md",tags:[],version:"current",lastUpdatedAt:1703206175,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{title:"How to Run a Mainnet Node"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Firewall configuration",id:"firewall-configuration",level:3},{value:"Step 1: Initial setup",id:"step-1-initial-setup",level:2},{value:"Step 2: Running Stacks blockchain",id:"step-2-running-stacks-blockchain",level:2},{value:"Step 3: Verifying the services",id:"step-3-verifying-the-services",level:2},{value:"Stopping the mainnet node",id:"stopping-the-mainnet-node",level:2},{value:"Additional reading",id:"additional-reading",level:2}],d={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This guide shows you how to run a local mainnet node using Docker images."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This guide focuses on Unix-like operating systems (Linux and MacOS). This has not been tested on\nWindows.")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"Running a node has no specialized hardware requirements. Users have been successful in running nodes on Raspberry Pi\nboards and other system-on-chip architectures. However, in order to complete this guide, you do need the following software\ninstalled on the node host machine:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://curl.se/download.html"},"curl")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/download/"},"jq"))),(0,o.kt)("h3",{id:"firewall-configuration"},"Firewall configuration"),(0,o.kt)("p",null,"In order for the API node services to work correctly, you must configure any network firewall rules to allow traffic on\nthe ports discussed in this section. The details of network and firewall configuration are highly specific to your\nmachine and network, so a detailed example isn't provided."),(0,o.kt)("p",null,"The following ports must open on the host machine:"),(0,o.kt)("p",null,"Ingress:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"stacks-blockchain (open to ",(0,o.kt)("inlineCode",{parentName:"li"},"0.0.0.0/0"),"):",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"20443 TCP")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"20444 TCP"))))),(0,o.kt)("p",null,"Egress:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"8332")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"8333")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"20443-20444"))),(0,o.kt)("p",null,"These egress ports are for syncing the ",(0,o.kt)("inlineCode",{parentName:"p"},"stacks-blockchain")," and Bitcoin headers. If they're not open, the sync will fail."),(0,o.kt)("h2",{id:"step-1-initial-setup"},"Step 1: Initial setup"),(0,o.kt)("p",null,"In order to run the mainnet node, you must download the Docker images and create a directory structure to hold the\npersistent data from the services. Download and configure the Docker images with the following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull blockstack/stacks-blockchain\n")),(0,o.kt)("p",null,"Create a directory structure for the service data with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir -p ./stacks-node/{persistent-data/stacks-blockchain/mainnet,config/mainnet} && cd stacks-node\n")),(0,o.kt)("h2",{id:"step-2-running-stacks-blockchain"},"Step 2: Running Stacks blockchain"),(0,o.kt)("p",null,"First, create the ",(0,o.kt)("inlineCode",{parentName:"p"},"./config/Config.toml")," file and add the following content to the\nfile using a text editor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[node]\nworking_dir = "/root/stacks-node/data"\nrpc_bind = "0.0.0.0:20443"\np2p_bind = "0.0.0.0:20444"\nbootstrap_node = "02196f005965cebe6ddc3901b7b1cc1aa7a88f305bb8c5893456b8f9a605923893@seed.mainnet.hiro.so:20444"\nwait_time_for_microblocks = 10000\n\n[burnchain]\nchain = "bitcoin"\nmode = "mainnet"\npeer_host = "bitcoin.blockstack.com"\nusername = "blockstack"\npassword = "blockstacksystem"\nrpc_port = 8332\npeer_port = 8333\n\n[connection_options]\nread_only_call_limit_write_length = 0\nread_only_call_limit_read_length = 100000\nread_only_call_limit_write_count = 0\nread_only_call_limit_read_count = 30\nread_only_call_limit_runtime = 1000000000\n')),(0,o.kt)("p",null,"Start the ",(0,o.kt)("inlineCode",{parentName:"p"},"stacks-blockchain")," container with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm \\\n  --name stacks-blockchain \\\n  -v $(pwd)/persistent-data/stacks-blockchain/mainnet:/root/stacks-node/data \\\n  -v $(pwd)/config/mainnet:/src/stacks-node \\\n  -p 20443:20443 \\\n  -p 20444:20444 \\\n  blockstack/stacks-blockchain \\\n/bin/stacks-node start --config /src/stacks-node/Config.toml\n")),(0,o.kt)("p",null,"You can verify the running ",(0,o.kt)("inlineCode",{parentName:"p"},"stacks-blockchain")," container with the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker ps --filter name=stacks-blockchain\n")),(0,o.kt)("h2",{id:"step-3-verifying-the-services"},"Step 3: Verifying the services"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The initial header sync can take several minutes, until this is done the following commands will not work.")),(0,o.kt)("p",null,"To verify the ",(0,o.kt)("inlineCode",{parentName:"p"},"stacks-blockchain")," burn chain header sync progress:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker logs stacks-blockchain\n")),(0,o.kt)("p",null,"The output should be similar to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"INFO [1626290705.886954] [src/burnchains/bitcoin/spv.rs:926] [main] Syncing Bitcoin headers: 1.2% (8000 out of 691034)\nINFO [1626290748.103291] [src/burnchains/bitcoin/spv.rs:926] [main] Syncing Bitcoin headers: 1.4% (10000 out of 691034)\nINFO [1626290776.956535] [src/burnchains/bitcoin/spv.rs:926] [main] Syncing Bitcoin headers: 1.7% (12000 out of 691034)\n")),(0,o.kt)("p",null,"To verify that the ",(0,o.kt)("inlineCode",{parentName:"p"},"stacks-blockchain")," tip height is progressing, use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"curl -sL localhost:20443/v2/info | jq\n")),(0,o.kt)("p",null,"If the instance is running, you should receive terminal output similar to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "peer_version": 402653184,\n  "pox_consensus": "89d752034e73ed10d3b97e6bcf3cff53367b4166",\n  "burn_block_height": 666143,\n  "stable_pox_consensus": "707f26d9d0d1b4c62881a093c99f9232bc74e744",\n  "stable_burn_block_height": 666136,\n  "server_version": "stacks-node 2.0.11.1.0-rc1 (master:67dccdf, release build, linux [x86_64])",\n  "network_id": 1,\n  "parent_network_id": 3652501241,\n  "stacks_tip_height": 61,\n  "stacks_tip": "e08b2fe3dce36fd6d015c2a839c8eb0885cbe29119c1e2a581f75bc5814bce6f",\n  "stacks_tip_consensus_hash": "ad9f4cb6155a5b4f5dcb719d0f6bee043038bc63",\n  "genesis_chainstate_hash": "74237aa39aa50a83de11a4f53e9d3bb7d43461d1de9873f402e5453ae60bc59b",\n  "unanchored_tip": "74d172df8f8934b468c5b0af2efdefe938e9848772d69bcaeffcfe1d6c6ef041",\n  "unanchored_seq": 0,\n  "exit_at_block_height": null\n}\n')),(0,o.kt)("h2",{id:"stopping-the-mainnet-node"},"Stopping the mainnet node"),(0,o.kt)("p",null,"Use the following commands to stop the local mainnet node:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker stop stacks-blockchain\n")),(0,o.kt)("h2",{id:"additional-reading"},"Additional reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/get-started/running-api-node"},"Running an API instance with Docker"))))}u.isMDXComponent=!0}}]);