"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[9069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,y=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=f;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const i={Title:"Use Clarity Values"},s="Using Clarity Values",o={unversionedId:"stacks-blockchain-api/feature-guides/use-clarity-values",id:"stacks-blockchain-api/feature-guides/use-clarity-values",title:"Using Clarity Values",description:"Some endpoints, like the read-only function contract call, require input to a serialized Clarity value. Other endpoints return serialized values that need to be deserialized.",source:"@site/docs/stacks-blockchain-api/feature-guides/use-clarity-values.md",sourceDirName:"stacks-blockchain-api/feature-guides",slug:"/stacks-blockchain-api/feature-guides/use-clarity-values",permalink:"/stacks-blockchain-api/feature-guides/use-clarity-values",draft:!1,editUrl:"https://github.com/hirosystems/docs/tree/main/docs/stacks-blockchain-api/feature-guides/use-clarity-values.md",tags:[],version:"current",frontMatter:{Title:"Use Clarity Values"},sidebar:"stacks-api",previous:{title:"Stacks Blockchain API",permalink:"/stacks-blockchain-api/feature-guides/use-stacks-blockchain-api"},next:{title:"Microblocks",permalink:"/stacks-blockchain-api/feature-guides/microblocks"}},c={},l=[],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-clarity-values"},"Using Clarity Values"),(0,a.kt)("p",null,"Some endpoints, like the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.hiro.so/api#operation/call_read_only_function"},"read-only function contract call"),", require input to a serialized ",(0,a.kt)("a",{parentName:"p",href:"https://docs.stacks.co/docs/clarity/"},"Clarity value"),". Other endpoints return serialized values that need to be deserialized."),(0,a.kt)("p",null,"The example shown below illustrates Clarity value usage in combination with the API."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@stacks/transactions")," library supports typed contract calls and makes ",(0,a.kt)("a",{parentName:"p",href:"https://docs.stacks.co/docs/clarity/"},"response value utilization much simpler"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Configuration,\n  SmartContractsApiInterface,\n  SmartContractsApi,\n  ReadOnlyFunctionSuccessResponse,\n} from '@stacks/blockchain-api-client';\nimport { uintCV, UIntCV, cvToHex, hexToCV, ClarityType } from '@stacks/transactions';\n\n(async () => {\n  const apiConfig: Configuration = new Configuration({\n    fetchApi: fetch,\n    // for mainnet, replace `testnet` with `mainnet`\n    basePath: 'https://api.testnet.hiro.so', // defaults to http://localhost:3999\n  });\n\n  const contractsApi: SmartContractsApiInterface = new SmartContractsApi(apiConfig);\n\n  const principal: string = 'ST000000000000000000002AMW42H';\n\n  // use most recent from: https://api.<mainnet/testnet>.hiro.so/v2/pox\n  const rewardCycle: UIntCV = uintCV(22);\n\n  // call a read-only function\n  const fnCall: ReadOnlyFunctionSuccessResponse = await contractsApi.callReadOnlyFunction({\n    contractAddress: principal,\n    contractName: 'pox',\n    functionName: 'is-pox-active',\n    readOnlyFunctionArgs: {\n      sender: principal,\n      arguments: [cvToHex(rewardCycle)],\n    },\n  });\n\n  console.log({\n    status: fnCall.okay,\n    result: fnCall.result,\n    representation: hexToCV(fnCall.result).type === ClarityType.BoolTrue,\n  });\n})().catch(console.error);\n")))}d.isMDXComponent=!0}}]);