"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[8458],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,k=d["".concat(o,".").concat(u)]||d[u]||p[u]||s;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},83123:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const s={},r="Clarinet SDK",l={unversionedId:"clarinet/guides/clarinet-js-sdk",id:"clarinet/guides/clarinet-js-sdk",title:"Clarinet SDK",description:'The Clarinet SDK is a JavaScript library that spawns and interacts with a simulated Clarinet environment, also known as "simnet."',source:"@site/docs/clarinet/guides/clarinet-js-sdk.md",sourceDirName:"clarinet/guides",slug:"/clarinet/guides/clarinet-js-sdk",permalink:"/doc/clarinet/guides/clarinet-js-sdk",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/clarinet/guides/clarinet-js-sdk.md",tags:[],version:"current",frontMatter:{},sidebar:"clarinet",previous:{title:"Getting Started",permalink:"/doc/clarinet/getting-started"},next:{title:"Unit Tests With the Clarinet SDK",permalink:"/doc/clarinet/guides/test-contract-with-clarinet-sdk"}},o={},c=[{value:"Getting Started With the SDK",id:"getting-started-with-the-sdk",level:2},{value:"Usage",id:"usage",level:3},{value:"API References",id:"api-references",level:2},{value:"<code>initSimnet</code>",id:"initsimnet",level:3},{value:"Simnet Properties",id:"simnet-properties",level:3},{value:"<code>Simnet.blockHeight</code>",id:"simnetblockheight",level:4},{value:"<code>Simnet.deployer</code>",id:"simnetdeployer",level:4},{value:"Simnet Methods",id:"simnet-methods",level:3},{value:"<code>Simnet.getAccounts()</code>",id:"simnetgetaccounts",level:4},{value:"<code>Simnet.getAssetsMap()</code>",id:"simnetgetassetsmap",level:4},{value:"<code>Simnet.getDataVar()</code>",id:"simnetgetdatavar",level:4},{value:"<code>Simnet.getMapEntry()</code>",id:"simnetgetmapentry",level:4},{value:"<code>Simnet.callReadOnlyFn()</code>",id:"simnetcallreadonlyfn",level:4},{value:"<code>Simnet.callPublicFn()</code>",id:"simnetcallpublicfn",level:4},{value:"<code>Simnet.transferSTX()</code>",id:"simnettransferstx",level:4},{value:"<code>Simnet.deployContract()</code>",id:"simnetdeploycontract",level:4},{value:"<code>Simnet.mineBlock()</code>",id:"simnetmineblock",level:4},{value:"<code>Simnet.mineEmptyBlock()</code>",id:"simnetmineemptyblock",level:4},{value:"<code>Simnet.mineEmptyBlocks()</code>",id:"simnetmineemptyblocks",level:4},{value:"<code>Simnet.getContractsInterfaces()</code>",id:"simnetgetcontractsinterfaces",level:4},{value:"<code>Simnet.getContractSource()</code>",id:"simnetgetcontractsource",level:4},{value:"<code>Simnet.getContractAST()</code>",id:"simnetgetcontractast",level:4}],m={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"clarinet-sdk"},"Clarinet SDK"),(0,i.kt)("p",null,'The Clarinet SDK is a JavaScript library that spawns and interacts with a simulated Clarinet environment, also known as "simnet."'),(0,i.kt)("p",null,"A Simnet is a simulated network that mimics the Stacks blockchain and runs the Clarity VM, without the need for actual Stacks and Bitcoin nodes (unlike Devnet, Testnet and Mainnet)."),(0,i.kt)("p",null,"Here is a non-exhaustive list of some of simnet's use-cases:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Call public and read-only functions from smart contracts"),(0,i.kt)("li",{parentName:"ul"},"Get clarity maps or data-var values"),(0,i.kt)("li",{parentName:"ul"},"Get contract interfaces (available functions and data)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/doc/clarinet/guides/test-contract-with-clarinet-sdk"},"Write unit tests for Clarity smart contracts"))),(0,i.kt)("h2",{id:"getting-started-with-the-sdk"},"Getting Started With the SDK"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The SDK requires Node.js >= 18.0 and NPM to be installed. ",(0,i.kt)("a",{parentName:"p",href:"https://volta.sh/"},"Volta")," is a great tool to install and manage JS tooling.")),(0,i.kt)("p",null,"The SDK can be installed with NPM. It works in pair with Stacks.js, so let's install it as well."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @hirosystems/clarinet-sdk @stacks/transactions\n")),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Here is a very basic code snippet showing how to use the SDK:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nimport { Cl } from '@stacks/transactions';\n\nasync function main() {\n  const simnet = await initSimnet();\n\n  const accounts = simnet.getAccounts();\n  const address1 = accounts.get('wallet_1');\n  if (!address1) throw new Error('invalid wallet name.');\n\n  const call = simnet.callPublicFn('counter', 'add', [Cl.uint(1)], address1);\n  console.log(call.result); // Cl.int(Cl.ok(true))\n}\n\nmain();\n")),(0,i.kt)("p",null,"By default, the SDK will look for a Clarinet.toml file in the current working directory.\nIt's also possible to provide the path to the manifest like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const simnet = await initSimnet('./path/to/Clarinet.toml');\n")),(0,i.kt)("h2",{id:"api-references"},"API References"),(0,i.kt)("h3",{id:"initsimnet"},(0,i.kt)("inlineCode",{parentName:"h3"},"initSimnet")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"initSimnet(manifestPath?: string): Promise<Simnet>\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"initSimnet")," function takes the manifest path (",(0,i.kt)("inlineCode",{parentName:"p"},"Clarinet.toml"),") as an optional argument. By default, it'll look for a manifest in the current working directory.\nIt will often be the first function to call when using the SDK."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\n\nconst simnet = await initSimnet();\n// or\nconst simnet = await initSimnet('./clarity/Clarinet.toml');\n")),(0,i.kt)("h3",{id:"simnet-properties"},"Simnet Properties"),(0,i.kt)("h4",{id:"simnetblockheight"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.blockHeight")),(0,i.kt)("p",null,"Returns the current block height of the simnet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconsole.log(simnet.blockHeight); // 0\n")),(0,i.kt)("h4",{id:"simnetdeployer"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.deployer")),(0,i.kt)("p",null,"Returns the default deployer address as defined in the project file ",(0,i.kt)("inlineCode",{parentName:"p"},"./setting/Devnet.toml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconsole.log(simnet.deployer); // ST1P...GZGM\n")),(0,i.kt)("h3",{id:"simnet-methods"},"Simnet Methods"),(0,i.kt)("h4",{id:"simnetgetaccounts"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getAccounts()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getAccounts(): Map<string, string>\n")),(0,i.kt)("p",null,"Get the Stacks addresses defined in the project file ",(0,i.kt)("inlineCode",{parentName:"p"},"./setting/Devnet.toml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\nconsole.log(address1); // ST1S...YPD5\n")),(0,i.kt)("h4",{id:"simnetgetassetsmap"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getAssetsMap()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getAssetsMap(): Map<string, Map<string, bigint>>\n")),(0,i.kt)("p",null,"Get a list of asset balances by Stacks addresses. This method returns STX balances as well as FT and NFT balances."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst assets = simnet.getAssetsMap();\nconst stxBalances = assets.get('STX')!;\n\nconsole.log(stxBalances);\n// Map(10) {\n//   'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM' => 100000000000000n,\n//   'ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5' => 100000000000000n,\n//   // ...\n// }\n")),(0,i.kt)("h4",{id:"simnetgetdatavar"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getDataVar()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getDataVar(contract: string, dataVar: string): ClarityValue\n")),(0,i.kt)("p",null,"Get the value of a data-var defined in a contract."),(0,i.kt)("p",null,"Given a contract with the following definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-clar"},"(define-data-var count uint u0)\n")),(0,i.kt)("p",null,"It can be accessed with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst counter = simnet.getDataVar('counter', 'count');\n// counter is Cl.uint(0)\n")),(0,i.kt)("h4",{id:"simnetgetmapentry"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getMapEntry()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getMapEntry(contract: string, mapName: string, mapKey: ClarityValue): ClarityValue\n")),(0,i.kt)("p",null,"Get the value of a map entry by its key.\nNote that it will always return an optional value (",(0,i.kt)("inlineCode",{parentName:"p"},"(some <value>)")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"none"),"). Just like Clarity ",(0,i.kt)("inlineCode",{parentName:"p"},"map-get?"),"."),(0,i.kt)("p",null,"Given a contract with the following definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-clar"},"(define-map participants principal bool)\n")),(0,i.kt)("p",null,"It can be accessed with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\n\nconst participated = simnet.getMapEntry('counter', 'participants', Cl.standardPrincipal(address1));\n// counter is Cl.some(Cl.bool(true|false)) or Cl.none()\n")),(0,i.kt)("h4",{id:"simnetcallreadonlyfn"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.callReadOnlyFn()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"callReadOnlyFn(\n  contract: string,     // stacks address of the contract\n  method: string,       // read-only function to call\n  args: ClarityValue[], // array of Clarity Values\n  sender: string        // stacks address of the sender\n): ParsedTransactionRes\n")),(0,i.kt)("p",null,"Call read-only functions exposed by a contract. This method returns an object with the result of the function call as a Clarity Value.\nIt takes function arguments in the form in Clarity Values, available in the package ",(0,i.kt)("inlineCode",{parentName:"p"},"@stacks/transactions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nimport { Cl } from '@stacks/transactions';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\n\nconst getCounter = simnet.callReadOnlyFn('counter', 'get-counter', [], address1);\nconsole.log(getCounter.result); // Cl.uint(1)\n\n// With arguments:\nconst callPOX = simnet.callReadOnlyFn('pox-3', 'is-pox-active', [Cl.uint(100)], address1);\n")),(0,i.kt)("p",null,"As in many methods of the SDK, the contract address can be just the contract name, if deployed by the default deployer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"simnet.callReadOnlyFn('counter', 'get-counter', [], address1);\n// equivalent\nsimnet.callReadOnlyFn(`${simnet.deployer}.counter`, 'get-counter', [], address1);\n")),(0,i.kt)("h4",{id:"simnetcallpublicfn"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.callPublicFn()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"callPublicFn(\n  contract: string,     // stacks address of the contract\n  method: string,       // public function to call\n  args: ClarityValue[], // array of Clarity Values\n  sender: string        // stacks address of the sender\n): ParsedTransactionRes\n")),(0,i.kt)("p",null,"Call read-only functions exposed by a contract. This method returns an object with the result of the function call as a Clarity Value and the events fired during the function execution. It takes function arguments in the form in Clarity Values, available in the package ",(0,i.kt)("inlineCode",{parentName:"p"},"@stacks/transactions"),". It will simulate a block being mined and increase the block height by one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nimport { Cl } from '@stacks/transactions';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\n\nconst callAdd = simnet.callPublicFn('counter', 'add', [Cl.uint(3)], address1);\nconsole.log(callAdd.result); // a Clarity Value such as Cl.bool(true)\nconsole.log(callAdd.events); // and array of events (such as print event, stx stransfer event, etc)\n")),(0,i.kt)("h4",{id:"simnettransferstx"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.transferSTX()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"transferSTX(amount: number | bigint, recipient: string, sender: string): ParsedTransactionRes\n")),(0,i.kt)("p",null,"Transfer STX from an address to an other. The amount is in uSTX. It will simulate a block being mined and increase the block height by one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\nconst address2 = accounts.get('wallet_2')!;\n\nconst transfer = simnet.transferSTX(100, address1, address2);\nconsole.log(transfer);\n// {\n//   result: Cl.ok(Cl.bool(true)),\n//   events: [\n//     {\n//       event: 'stx_transfer_event',\n//       data: {\n//         amount: '100',\n//         memo: '',\n//         recipient: 'ST1SJ3DTE5DN7X54YDH5D64R3BCB6A2AG2ZQ8YPD5',\n//         sender: 'ST2CY5V39NHDPWSXMW9QDT3HC3GD6Q6XX4CFRK9AG'\n//       }\n//     }\n//   ]\n// }\n")),(0,i.kt)("h4",{id:"simnetdeploycontract"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.deployContract()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"deployContract(\n  // name of the contract to be deployed\n  name: string,\n  // content of the contract\n  content: string,\n  // an object to specify options such as the ClarityVersion\n  options: DeployContractOptions | null,\n  // sender stacks address\n  sender: string\n): ParsedTransactionRes\n")),(0,i.kt)("p",null,"Deploy a contract to the Simnet. It will simulate a block being mined and increase the block height by one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nimport { Cl } from '@stacks/transactions';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\n\nconst source = '(define-public (add (a uint) (b uint)) (ok (+ a b)))';\nconst deployRes = simnet.deployContract('op', source, simnet.deployer);\n\nconst addRes = simnet.callPublicFn('op', 'add', [Cl.uint(1), Cl.uint(1)], address1);\nconsole.log(addRes.result); // Cl.ok(Cl.uint(2))\n\n// specify a clarityVersion\nsimnet.deployContract('contract2', source, { clarityVersion: 2 }, deployerAddr);\n")),(0,i.kt)("h4",{id:"simnetmineblock"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.mineBlock()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mineBlock(txs: Tx[]): ParsedTransactionRes[]\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".callPublicFn()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".transferSTX()"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},".deployContract()")," methods all mine one block with only one transaction. It can also be useful to mine a block with multiple transactions. This is what ",(0,i.kt)("inlineCode",{parentName:"p"},".mineBlock()")," is for."),(0,i.kt)("p",null,"It take an array of transaction objects. The transactions can be built with the ",(0,i.kt)("inlineCode",{parentName:"p"},"tx")," helper exported by the SDK.\nIt has three methods ",(0,i.kt)("inlineCode",{parentName:"p"},".callPublicFn()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".transferSTX()"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},".deployContract()"),", which have the same interface as the ",(0,i.kt)("inlineCode",{parentName:"p"},"Simnet")," methods but instead of performing a transaction, it will build a transaction object than can be passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"mineBlock()")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// import `tx` as well\nimport { initSimnet, tx } from '@hirosystems/clarinet-sdk';\nimport { Cl } from '@stacks/transactions';\nconst simnet = await initSimnet();\n\nconst accounts = simnet.getAccounts();\nconst address1 = accounts.get('wallet_1')!;\nconst address2 = accounts.get('wallet_2')!;\n\nconst block = simnet.mineBlock([\n  tx.callPublicFn('counter', 'increment', [], address1),\n  tx.callPublicFn('counter', 'add', [Cl.uint(10)], address1),\n  tx.transferSTX(100, address1, address2),\n]);\n\nconsole.log(block[0]); // `increment` response with { result, events}\nconsole.log(block[1]); // `add` response with { result, events}\nconsole.log(block[2]); // `transfer_stx` response with { result, events}\n")),(0,i.kt)("h4",{id:"simnetmineemptyblock"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.mineEmptyBlock()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mineEmptyBlock(): number\n")),(0,i.kt)("p",null,"Mine one empty block and increase the block height by one. Returns the new block height."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconsole.log(simnet.blockHeight); // 0\nconst newHeight = simnet.mineEmptyBlock();\ncosole.log(newHeight); // 1\nconsole.log(simnet.blockHeight); // 1\n")),(0,i.kt)("h4",{id:"simnetmineemptyblocks"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.mineEmptyBlocks()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mineEmptyBlocks(count?: number): number\n")),(0,i.kt)("p",null,"Mine multiple empty blocks to reach a certain block height. Returns the new block height."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconsole.log(simnet.blockHeight); // 0\nconst newHeight = simnet.mineEmptyBlocks(10);\nconsole.log(newHeight); // 10\nconsole.log(simnet.blockHeight); // 10\n")),(0,i.kt)("h4",{id:"simnetgetcontractsinterfaces"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getContractsInterfaces()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getContractsInterfaces(): Map<string, ContractInterface>\n")),(0,i.kt)("p",null,"Returns the interfaces of the project contracts. This method returns a Map of Contracts; the keys are the contract addresses.\nThe interfaces contain information such as the available functions, data-vars and maps, NFTs, and the FTs defined in the contract.\nIt can be used to get the list of the contracts and iterate of it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst contractInterfaces = simnet.getContractsInterfaces();\nlet counterInterface = contractInterfaces.get(`${deployerAddr}.counter`);\nconsole.log(counterInterface?.functions); // array of the functions\n")),(0,i.kt)("h4",{id:"simnetgetcontractsource"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getContractSource()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getContractSource(contract: string): string | undefined\n")),(0,i.kt)("p",null,"Get the source code of a contract as a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst source = '(define-public (add (a uint) (b uint)) (ok (+ a b)))';\nsimnet.deployContract('contract', source, null, deployerAddr);\n\nconst contractSource = simnet.getContractSource('contract');\nconsole.log(contractSource);\n// \"(define-public (add (a uint) (b uint)) (ok (+ a b)))\"\n")),(0,i.kt)("h4",{id:"simnetgetcontractast"},(0,i.kt)("inlineCode",{parentName:"h4"},"Simnet.getContractAST()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getContractAST(contractId: string): ContractAST\n")),(0,i.kt)("p",null,"Get the full AST of a Clarity contract."),(0,i.kt)("p",null,"It throws an error if it fails to get the AST or to encode it JS (which should not happen).",(0,i.kt)("br",{parentName:"p"}),"\n","Note: The ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractAST")," TypeScript is still very simple but will be improved over time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { initSimnet } from '@hirosystems/clarinet-sdk';\nconst simnet = await initSimnet();\n\nconst counterAst = simnet.getContractAST('counter');\n")))}p.isMDXComponent=!0}}]);