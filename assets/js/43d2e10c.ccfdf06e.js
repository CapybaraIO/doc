"use strict";(self.webpackChunk_CapybaraIO_docs=self.webpackChunk_CapybaraIO_docs||[]).push([[4318],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>k});var c=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);e&&(c=c.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,c)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,c,o=function(t,e){if(null==t)return{};var n,c,o={},l=Object.keys(t);for(c=0;c<l.length;c++)n=l[c],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(c=0;c<l.length;c++)n=l[c],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var r=c.createContext({}),s=function(t){var e=c.useContext(r),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},d=function(t){var e=s(t.components);return c.createElement(r.Provider,{value:e},t.children)},p="mdxType",b={inlineCode:"code",wrapper:function(t){var e=t.children;return c.createElement(c.Fragment,{},e)}},h=c.forwardRef((function(t,e){var n=t.components,o=t.mdxType,l=t.originalType,r=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),p=s(n),h=o,k=p["".concat(r,".").concat(h)]||p[h]||b[h]||l;return n?c.createElement(k,a(a({ref:e},d),{},{components:n})):c.createElement(k,a({ref:e},d))}));function k(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var l=n.length,a=new Array(l);a[0]=h;var i={};for(var r in e)hasOwnProperty.call(e,r)&&(i[r]=e[r]);i.originalType=t,i[p]="string"==typeof t?t:o,a[1]=i;for(var s=2;s<l;s++)a[s]=n[s];return c.createElement.apply(null,a)}return c.createElement.apply(null,n)}h.displayName="MDXCreateElement"},91604:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>r});var c=n(87462),o=(n(67294),n(3905));const l={},a="Get block by hash",i={type:"api",id:"get-block-by-hash",unversionedId:"get-block-by-hash",title:"Get block by hash",description:"",slug:"/get-block-by-hash",frontMatter:{},api:{description:"Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block ('get_block_list' API) to get your block details.",tags:["Blocks"],operationId:"get_block_by_hash",responses:{200:{description:"Block",content:{"application/json":{schema:{title:"Block",description:"A block",type:"object",additionalProperties:!1,required:["canonical","height","hash","index_block_hash","parent_block_hash","txs","burn_block_time","burn_block_time_iso","burn_block_hash","burn_block_height","miner_txid","parent_microblock_hash","parent_microblock_sequence","microblocks_accepted","microblocks_streamed","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length","microblock_tx_count"],properties:{canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},height:{type:"integer",description:"Height of the block"},hash:{type:"string",description:"Hash representing the block"},index_block_hash:{type:"string",description:"The only hash that can uniquely identify an anchored block or an unconfirmed state trie"},parent_block_hash:{type:"string",description:"Hash of the parent block"},burn_block_time:{type:"number",description:"Unix timestamp (in seconds) indicating when this block was mined."},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined."},burn_block_hash:{type:"string",description:"Hash of the anchor chain block"},burn_block_height:{type:"integer",description:"Height of the anchor chain block"},miner_txid:{type:"string",description:"Anchor chain transaction ID"},parent_microblock_hash:{type:"string",description:"The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1."},parent_microblock_sequence:{type:"integer",description:"The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1."},txs:{type:"array",description:"List of transactions included in the block",items:{type:"string",description:"Transaction ID"}},microblocks_accepted:{type:"array",description:"List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.",items:{type:"string",description:"Microblock hash"}},microblocks_streamed:{type:"array",description:"List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.",items:{type:"string",description:"Microblock hash"}},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},microblock_tx_count:{type:"object",description:"List of txs counts in each accepted microblock",additionalProperties:{type:"number"}}}},example:{canonical:!0,height:3275,hash:"0xe77ba8cf6bb7c0e4f64adc83356289ed467d31a22354907b4bb814590058430f",index_block_hash:"0x918697ef63f9d8bdf844c3312b299e72a231cde542f3173f7755bb8c1cdaf3a7",parent_block_hash:"0x75ab21ef25cbff2caa14c27d830ed7886a4d1522e1b6f9e5dc3b59ccf73ed49f",burn_block_time:1594233639,burn_block_time_iso:"2020-08-27T16:41:26.000Z",burn_block_hash:"0xb154c008df2101023a6d0d54986b3964cee58119eed14f5bed98e15678e18fe2",burn_block_height:654439,miner_txid:"0xd7d56070277ccd87b42acf0c91f915dd181f9db4cf878a4e95518bc397c240cc",parent_microblock_hash:"0x590a1bb1d7bcbeafce0a9fc8f8a69e369486192d14687fe95fbe4dc1c71d49df",parent_microblock_sequence:2,txs:["0x4262db117659d1ca9406970c8f44ffd3d8f11f8e18c591d2e3960f4070107754","0x383632cd3b5464dffb684082750fcfaddd1f52625bbb9f884ed8f45d2b1f0547","0xc99fe597e44b8bd15a50eec660c6e679a7144a5a8553d214b9d5f1406d278c22"],microblocks_accepted:["0xce0b1a4099d3fc7d5885cc7a3baa952b6d999f9709d0683b98b843597208231c","0x4c0529b6448a5885991c5021bd869cc97f1692c128a98b382729dc962203c326","0x64968846291dfea1015228a9d4bbd60aac81378cd6774b810b08e59e6b0e7494"],microblocks_streamed:["0xb5650ef855f7d90fc146942e85cf9fac3a8c47ec408aca02f3cf9ed7c82f6cc6","0xeeb9aa5741d84aa0bc5de4f2fbdeae57ae29694479475d45a67ae7bd7e2c98f3","0x4f4c368d5f06fdf6065c5bafd9cb37391fddc9c279cfc57be35e4bf8ee932cbd","0xde2fc8d99872c827f144c752c002d29f9315dfc09472a09572ac7447ae623dea"],execution_cost_read_count:2477,execution_cost_read_length:1659409,execution_cost_runtime:2520952e3,execution_cost_write_count:608,execution_cost_write_length:80170,microblock_tx_count:{"0xce0b1a4099d3fc7d5885cc7a3baa952b6d999f9709d0683b98b843597208231c":5,"0x4c0529b6448a5885991c5021bd869cc97f1692c128a98b382729dc962203c326":6,"0x64968846291dfea1015228a9d4bbd60aac81378cd6774b810b08e59e6b0e7494":9}}}}},404:{description:"Cannot find block with given ID",content:{"application/json":{example:{error:"cannot find block by hash 0xabc123"}}}}},method:"get",path:"/extended/v1/block/{hash}",parameters:[{name:"hash",in:"path",description:"Hash of the block",required:!0,schema:{type:"string"},example:"0x4839a8b01cfb39ffcc0d07d3db31e848d5adf5279d529ed5062300b9f353ff79"}],servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://capybaraio.github.io/doc/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get block by hash",description:{content:"Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block ('get_block_list' API) to get your block details.",type:"text/plain"},url:{path:["extended","v1","block",":hash"],host:["{{baseUrl}}"],query:[],variable:[{description:{content:"(Required) Hash of the block",type:"text/plain"},type:"any",value:"<string>",key:"hash"}]},method:"GET"}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/doc/api/get-block-by-hash",previous:{title:"Get recent blocks",permalink:"/doc/api/get-recent-blocks"},next:{title:"Get block by height",permalink:"/doc/api/get-block-by-height"}},r=[],s={toc:r},d="wrapper";function p(t){let{components:e,...n}=t;return(0,o.kt)(d,(0,c.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-block-by-hash"},"Get block by hash"),(0,o.kt)("p",null,"Retrieves block details of a specific block for a given chain height. You can use the hash from your latest block ('get_block_list' API) to get your block details."),(0,o.kt)("table",{style:{display:"table",width:"100%"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Path Parameters"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,o.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Hash of the block")),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 0x4839a8b01cfb39ffcc0d07d3db31e848d5adf5279d529ed5062300b9f353ff79"))))),(0,o.kt)("table",{style:{display:"table",width:"100%"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("div",{style:{display:"flex"}},(0,o.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,o.kt)("code",null,"200")),(0,o.kt)("div",null,(0,o.kt)("p",null,"Block"))),(0,o.kt)("div",null,(0,o.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,o.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,o.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,o.kt)("div",null)))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"canonical"),(0,o.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if block corresponds to the canonical chain tip")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Height of the block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Hash representing the block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"index_block_hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"The only hash that can uniquely identify an anchored block or an unconfirmed state trie")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"parent_block_hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Hash of the parent block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"burn_block_time"),(0,o.kt)("span",{style:{opacity:"0.6"}}," number"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Unix timestamp (in seconds) indicating when this block was mined.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"burn_block_time_iso"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) indicating when this block was mined.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"burn_block_hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Hash of the anchor chain block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"burn_block_height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Height of the anchor chain block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"miner_txid"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Anchor chain transaction ID")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"parent_microblock_hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"parent_microblock_sequence"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"The hash of the last streamed block that precedes this block to which this block is to be appended. Not every anchored block will have a parent microblock stream. An anchored block that does not have a parent microblock stream has the parent microblock hash set to an empty string, and the parent microblock sequence number set to -1.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"txs"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"List of transactions included in the block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"microblocks_accepted"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"List of microblocks that were accepted in this anchor block. Not every anchored block will have a accepted all (or any) of the previously streamed microblocks. Microblocks that were orphaned are not included in this list.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"microblocks_streamed"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"List of microblocks that were streamed/produced by this anchor block's miner. This list only includes microblocks that were accepted in the following anchor block. Microblocks that were orphaned are not included in this list.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"execution_cost_read_count"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Execution cost read count.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"execution_cost_read_length"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Execution cost read length.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"execution_cost_runtime"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Execution cost runtime.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"execution_cost_write_count"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Execution cost write count.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"execution_cost_write_length"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"Execution cost write length.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"microblock_tx_count"),(0,o.kt)("span",{style:{opacity:"0.6"}}," object"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"List of txs counts in each accepted microblock"))))))))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("div",{style:{display:"flex"}},(0,o.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,o.kt)("code",null,"404")),(0,o.kt)("div",null,(0,o.kt)("p",null,"Cannot find block with given ID"))),(0,o.kt)("div",null))))))}p.isMDXComponent=!0}}]);