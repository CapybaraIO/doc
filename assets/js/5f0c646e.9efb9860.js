"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[6459],{3905:(e,t,a)=>{a.d(t,{Zo:()=>k,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=n.createContext({}),c=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},k=function(e){var t=c(e.components);return n.createElement(r.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),p=c(a),u=i,d=p["".concat(r,".").concat(u)]||p[u]||h[u]||s;return a?n.createElement(d,l(l({ref:t},k),{},{components:a})):n.createElement(d,l({ref:t},k))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,l=new Array(s);l[0]=u;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<s;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},77564:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const s={Title:"Run a Stacks Blockchain API instance with Docker"},l="Run a Stacks Blockchain API instance with Docker",o={unversionedId:"stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker",id:"stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker",title:"Run a Stacks Blockchain API instance with Docker",description:"_NOTE:_",source:"@site/docs/stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker.md",sourceDirName:"stacks-blockchain-api/how-to-guides",slug:"/stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker",permalink:"/doc/stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/stacks-blockchain-api/how-to-guides/how-to-run-stacks-blockchain-api-docker.md",tags:[],version:"current",frontMatter:{Title:"Run a Stacks Blockchain API instance with Docker"},sidebar:"stacks-api",previous:{title:"How to install Stacks CLI",permalink:"/doc/stacks-blockchain-api/how-to-guides/how-to-install-stacks-cli"},next:{title:"How to Run an API Node",permalink:"/doc/stacks-blockchain-api/how-to-guides/how-to-run-api-node"}},r={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Firewalling",id:"firewalling",level:3},{value:"Initial Setup",id:"initial-setup",level:3},{value:"Postgres",id:"postgres",level:2},{value:"Starting postgres",id:"starting-postgres",level:3},{value:"Stopping Postgres",id:"stopping-postgres",level:3},{value:"Stacks Blockchain API",id:"stacks-blockchain-api",level:2},{value:"Starting stacks-blockchain-api",id:"starting-stacks-blockchain-api",level:3},{value:"Stopping stacks-blockchain-api",id:"stopping-stacks-blockchain-api",level:3},{value:"Stacks Blockchain",id:"stacks-blockchain",level:2},{value:"Starting stacks-blockchain",id:"starting-stacks-blockchain",level:3},{value:"Stopping stacks-blockchain",id:"stopping-stacks-blockchain",level:3},{value:"Verify Everything is running correctly",id:"verify-everything-is-running-correctly",level:2},{value:"Postgres testing",id:"postgres-testing",level:3},{value:"stacks-blockchain testing",id:"stacks-blockchain-testing",level:3},{value:"stacks-blockchain-api testing",id:"stacks-blockchain-api-testing",level:3}],k={toc:c},p="wrapper";function h(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"run-a-stacks-blockchain-api-instance-with-docker"},"Run a Stacks Blockchain API instance with Docker"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))),(0,i.kt)("p",{parentName:"blockquote"},"For a faster way to deploy the Stacks Blockchain and Stacks Blockchain API with Docker, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/stacks-network/stacks-blockchain-docker"},"Stacks Blockchain Docker")," repository.")),(0,i.kt)("p",null,"On this page, you will learn how to run a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},"stacks-blockchain-api")," instance. There are several components involved here to have a working setup, and descriptions will be given for each of these components."),(0,i.kt)("p",null,"This page will also focus on the ",(0,i.kt)("strong",{parentName:"p"},"easy")," path to get the services running, which is currently Docker."),(0,i.kt)("p",null,"Please note that the following guide is meant for a Unix-like OS (Linux/MacOS). The commands ",(0,i.kt)("em",{parentName:"p"},"may")," work on Windows but will likely need some adjustments."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#run-a-stacks-blockchain-api-instance-with-docker"},"Run a Stacks Blockchain API instance with Docker"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#requirements"},"Requirements"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#firewalling"},"Firewalling")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#initial-setup"},"Initial Setup")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#postgres"},"Postgres"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#starting-postgres"},"Starting postgres")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stopping-postgres"},"Stopping Postgres")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stacks-blockchain-api"},"Stacks Blockchain API"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#starting-stacks-blockchain-api"},"Starting stacks-blockchain-api")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stopping-stacks-blockchain-api"},"Stopping stacks-blockchain-api")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stacks-blockchain"},"Stacks Blockchain"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#starting-stacks-blockchain"},"Starting stacks-blockchain")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stopping-stacks-blockchain"},"Stopping stacks-blockchain")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#verify-everything-is-running-correctly"},"Verify Everything is running correctly"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#postgres-testing"},"Postgres testing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stacks-blockchain-testing"},"stacks-blockchain testing")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#stacks-blockchain-api-testing"},"stacks-blockchain-api testing"))))))),(0,i.kt)("h2",{id:"requirements"},"Requirements"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"Docker")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"bash")," or some other Unix-like shell (i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"zsh"),")"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"curl")," binary")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," The order of operations here is important."),(0,i.kt)("p",null,"Essentially, to start the API successfully you will want to perform the following steps ",(0,i.kt)("strong",{parentName:"p"},"in order"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#starting-postgres"},"start postgres")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#starting-stacks-blockchain-api"},"start stacks-blockchain-api")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#starting-stacks-blockchain"},"start stacks-blockchain"))),(0,i.kt)("p",null,"Conversely, to bring down the API and ",(0,i.kt)("em",{parentName:"p"},"NOT")," lose any data, perform the same steps ",(0,i.kt)("strong",{parentName:"p"},"in Reverse"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#stopping-stacks-blockchain"},"stop stacks-blockchain")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#stopping-stacks-blockchain-api"},"stop stacks-blockchain-api")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#stopping-postgres"},"stop postgres"))),(0,i.kt)("h3",{id:"firewalling"},"Firewalling"),(0,i.kt)("p",null,"In order for the services to work correctly, the host will need some ports open."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Default Ingress Ports"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"postgres (",(0,i.kt)("em",{parentName:"li"},"open to ",(0,i.kt)("inlineCode",{parentName:"em"},"localhost")," only"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"5432 TCP")))),(0,i.kt)("li",{parentName:"ul"},"stacks-blockchain (",(0,i.kt)("em",{parentName:"li"},"open to ",(0,i.kt)("inlineCode",{parentName:"em"},"0.0.0.0/0")),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20443 TCP")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20444 TCP")))),(0,i.kt)("li",{parentName:"ul"},"stacks-blockchain-api (",(0,i.kt)("em",{parentName:"li"},"open to where you want to access the api from"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3999 TCP"))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Default Egress Ports"),":"),(0,i.kt)("p",null,"The only egress ports you will need (outside of what you need normally to install/update packages) are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"8332")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"8333")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20443-20444"))),(0,i.kt)("p",null,"These are the ports used to sync the stacks-blockchain and the bitcoin headers. If they are not open, the sync ",(0,i.kt)("strong",{parentName:"p"},"will")," fail."),(0,i.kt)("h3",{id:"initial-setup"},"Initial Setup"),(0,i.kt)("p",null,"Since you will need to create some files/dirs for persistent data, you must first create a base directory structure and download the docker images."),(0,i.kt)("p",null,"You should use the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir -p ./stacks-node/{persistent-data/postgres,persistent-data/stacks-blockchain,config}\n$ docker pull blockstack/stacks-blockchain-api \\\n    && docker pull blockstack/stacks-blockchain \\\n    && docker pull postgres:alpine\n$ docker network create stacks-blockchain > /dev/null 2>&1\n$ cd ./stacks-node\n")),(0,i.kt)("h2",{id:"postgres"},"Postgres"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"postgres:alpine")," image can be run with default settings, the only requirement is that a password Environment\nVariable is set for the ",(0,i.kt)("inlineCode",{parentName:"p"},"postgres")," user: ",(0,i.kt)("inlineCode",{parentName:"p"},"POSTGRES_PASSWORD=postgres")),(0,i.kt)("h3",{id:"starting-postgres"},"Starting postgres"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm \\\n    --name postgres \\\n    --net=stacks-blockchain \\\n    -e POSTGRES_PASSWORD=postgres \\\n    -v $(pwd)/persistent-data/postgres:/var/lib/postgresql/data \\\n    -p 5432:5432 \\\n    postgres:alpine\n")),(0,i.kt)("p",null,"There should now be a running postgres instance running on port ",(0,i.kt)("inlineCode",{parentName:"p"},"5432"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ docker ps --filter name=postgres\nCONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                                       NAMES\nf835f3a8cfd4   postgres:alpine   "docker-entrypoint.s\u2026"   1 minute ago   Up 1 minute   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   postgres\n')),(0,i.kt)("h3",{id:"stopping-postgres"},"Stopping Postgres"),(0,i.kt)("p",null,"To stop the postgres service (this will also remove the container, but not the data), run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker stop postgres\n")),(0,i.kt)("h2",{id:"stacks-blockchain-api"},"Stacks Blockchain API"),(0,i.kt)("p",null,"The Stacks Blockchain API requires you to set several environment variables in order to run properly.",(0,i.kt)("br",{parentName:"p"}),"\n","To reduce complexity, create a ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file that you will use for these environment variables."),(0,i.kt)("p",null,"Create a new file: ",(0,i.kt)("inlineCode",{parentName:"p"},"./.env")," with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-none"},"NODE_ENV=production\nGIT_TAG=master\nPG_HOST=postgres\nPG_PORT=5432\nPG_USER=postgres\nPG_PASSWORD=postgres\nPG_DATABASE=postgres\nSTACKS_CHAIN_ID=0x00000001\nV2_POX_MIN_AMOUNT_USTX=90000000260\nSTACKS_CORE_EVENT_PORT=3700\nSTACKS_CORE_EVENT_HOST=0.0.0.0\nSTACKS_BLOCKCHAIN_API_PORT=3999\nSTACKS_BLOCKCHAIN_API_HOST=0.0.0.0\nSTACKS_CORE_RPC_HOST=stacks-blockchain\nSTACKS_CORE_RPC_PORT=20443\nAPI_DOCS_URL=https://docs.hiro.so/api\n")),(0,i.kt)("p",null,"The other environment variables to pay attention to are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PG_HOST"),": Set this to your ",(0,i.kt)("strong",{parentName:"li"},"postgres")," instance. In this guide, we'll be using a container named ",(0,i.kt)("inlineCode",{parentName:"li"},"postgres"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"STACKS_CORE_RPC_HOST"),": Set this to your ",(0,i.kt)("strong",{parentName:"li"},"stacks blockchain")," node. In this guide, we'll be using a container named ",(0,i.kt)("inlineCode",{parentName:"li"},"stacks-blockchain"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"API_DOCS_URL"),": Set this to enable your docs API ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3999/doc"),".")),(0,i.kt)("h3",{id:"starting-stacks-blockchain-api"},"Starting stacks-blockchain-api"),(0,i.kt)("p",null,"Run the following command to run Stacks Blockchain API:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm \\\n    --name stacks-blockchain-api \\\n    --net=stacks-blockchain \\\n    --env-file $(pwd)/.env \\\n    -p 3700:3700 \\\n    -p 3999:3999 \\\n    blockstack/stacks-blockchain-api\n")),(0,i.kt)("p",null,"You shoudl now have a running stacks-blockchain-api instance running on ports ",(0,i.kt)("inlineCode",{parentName:"p"},"3999")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"3700"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'e$ docker ps --filter name=stacks-blockchain-api\nCONTAINER ID   IMAGE                              COMMAND                  CREATED          STATUS          PORTS                                                                                  NAMES\na86a26da6c5a   blockstack/stacks-blockchain-api   "docker-entrypoint.s\u2026"   1 minute ago   Up 1 minute   0.0.0.0:3700->3700/tcp, :::3700->3700/tcp, 0.0.0.0:3999->3999/tcp, :::3999->3999/tcp   stacks-blockchain-api\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))),(0,i.kt)("p",{parentName:"blockquote"},"On initial sync, it will take several minutes for port ",(0,i.kt)("inlineCode",{parentName:"p"},"3999")," to become available.")),(0,i.kt)("h3",{id:"stopping-stacks-blockchain-api"},"Stopping stacks-blockchain-api"),(0,i.kt)("p",null,"To stop the stacks-blockchain-api service (this will also remove the container), run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker stop stacks-blockchain-api\n")),(0,i.kt)("h2",{id:"stacks-blockchain"},"Stacks Blockchain"),(0,i.kt)("p",null,"In order to have a ",(0,i.kt)("strong",{parentName:"p"},"usable")," API instance, you need to have data from a running ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},"stacks-blockchain")," instance."),(0,i.kt)("p",null,"Because the focus is on running the API with Docker, it also makes things easier if you also run the stacks-blockchain instance the same way."),(0,i.kt)("p",null,"With that in mind, you will need to have the following configuration in your ",(0,i.kt)("inlineCode",{parentName:"p"},"Config.toml"),". This configuration block will send blockchain events to the API instance that was previously started:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[[events_observer]]\nendpoint = "<fqdn>:3700"\nretry_count = 255\nevents_keys = ["*"]\n')),(0,i.kt)("p",null,"Here is an example ",(0,i.kt)("inlineCode",{parentName:"p"},"Config.toml")," that you can use - create this file as ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/mainnet/Config.toml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[node]\nworking_dir = "/root/stacks-node/data"\nrpc_bind = "0.0.0.0:20443"\np2p_bind = "0.0.0.0:20444"\nbootstrap_node = "02196f005965cebe6ddc3901b7b1cc1aa7a88f305bb8c5893456b8f9a605923893@seed.mainnet.hiro.so:20444"\nwait_time_for_microblocks = 10000\n\n[[events_observer]]\nendpoint = "stacks-blockchain-api:3700"\nretry_count = 255\nevents_keys = ["*"]\n\n[burnchain]\nchain = "bitcoin"\nmode = "mainnet"\npeer_host = "bitcoin.blockstack.com"\nusername = "blockstack"\npassword = "blockstacksystem"\nrpc_port = 8332\npeer_port = 8333\n\n[connection_options]\nread_only_call_limit_write_length = 0\nread_only_call_limit_read_length = 100000\nread_only_call_limit_write_count = 0\nread_only_call_limit_read_count = 30\nread_only_call_limit_runtime = 1000000000\n')),(0,i.kt)("h3",{id:"starting-stacks-blockchain"},"Starting stacks-blockchain"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm \\\n    --name stacks-blockchain \\\n    --net=stacks-blockchain \\\n    -v $(pwd)/persistent-data/stacks-blockchain:/root/stacks-node/data \\\n    -v $(pwd)/config:/src/stacks-node \\\n    -p 20443:20443 \\\n    -p 20444:20444 \\\n    blockstack/stacks-blockchain \\\n/bin/stacks-node start --config /src/stacks-node/Config.toml\n")),(0,i.kt)("p",null,"You should now see a running stacks-blockchain instance running on ports ",(0,i.kt)("inlineCode",{parentName:"p"},"20443-20444"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ docker ps --filter name=stacks-blockchain$\nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                                                   NAMES\n199e37a324f1   blockstack/stacks-blockchain   "/bin/stacks-node st\u2026"   1 minute ago   Up 1 minute   0.0.0.0:20443-20444->20443-20444/tcp, :::20443-20444->20443-20444/tcp   stacks-blockchain\n')),(0,i.kt)("h3",{id:"stopping-stacks-blockchain"},"Stopping stacks-blockchain"),(0,i.kt)("p",null,"To stop the stacks-blockchain service (this will also remove the container, but not the data), run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker stop stacks-blockchain\n")),(0,i.kt)("h2",{id:"verify-everything-is-running-correctly"},"Verify Everything is running correctly"),(0,i.kt)("h3",{id:"postgres-testing"},"Postgres testing"),(0,i.kt)("p",null,"To verfiy the database is ready:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Connect to the DB instance: ",(0,i.kt)("inlineCode",{parentName:"li"},"psql -h localhost -U postgres"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"this will require a locally installed postgresql client")),(0,i.kt)("li",{parentName:"ul"},"use the password from the ",(0,i.kt)("a",{parentName:"li",href:"#postgres"},"Environment Variable")," ",(0,i.kt)("inlineCode",{parentName:"li"},"POSTGRES_PASSWORD")))),(0,i.kt)("li",{parentName:"ol"},"List current databases: ",(0,i.kt)("inlineCode",{parentName:"li"},"\\l")),(0,i.kt)("li",{parentName:"ol"},"Disconnect from the DB : ",(0,i.kt)("inlineCode",{parentName:"li"},"\\q"))),(0,i.kt)("h3",{id:"stacks-blockchain-testing"},"stacks-blockchain testing"),(0,i.kt)("p",null,"Verify the stacks-blockchain tip height is progressing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -sL localhost:20443/v2/info | jq\n{\n  "peer_version": 402653184,\n  "pox_consensus": "89d752034e73ed10d3b97e6bcf3cff53367b4166",\n  "burn_block_height": 666143,\n  "stable_pox_consensus": "707f26d9d0d1b4c62881a093c99f9232bc74e744",\n  "stable_burn_block_height": 666136,\n  "server_version": "stacks-node 2.0.11.1.0-rc1 (master:67dccdf, release build, linux [x86_64])",\n  "network_id": 1,\n  "parent_network_id": 3652501241,\n  "stacks_tip_height": 61,\n  "stacks_tip": "e08b2fe3dce36fd6d015c2a839c8eb0885cbe29119c1e2a581f75bc5814bce6f",\n  "stacks_tip_consensus_hash": "ad9f4cb6155a5b4f5dcb719d0f6bee043038bc63",\n  "genesis_chainstate_hash": "74237aa39aa50a83de11a4f53e9d3bb7d43461d1de9873f402e5453ae60bc59b",\n  "unanchored_tip": "74d172df8f8934b468c5b0af2efdefe938e9848772d69bcaeffcfe1d6c6ef041",\n  "unanchored_seq": 0,\n  "exit_at_block_height": null\n}\n')),(0,i.kt)("h3",{id:"stacks-blockchain-api-testing"},"stacks-blockchain-api testing"),(0,i.kt)("p",null,"Verify the stacks-blockchain-api is receiving data from the stacks-blockchain:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl -sL localhost:3999/v2/info | jq\n{\n  "peer_version": 402653184,\n  "pox_consensus": "e472cadc17dcf3bc1afafc6aa595899e55f25b72",\n  "burn_block_height": 666144,\n  "stable_pox_consensus": "6a6fb0aa75a8acd4919f56c9c4c81ce5bc42cac1",\n  "stable_burn_block_height": 666137,\n  "server_version": "stacks-node 2.0.11.1.0-rc1 (master:67dccdf, release build, linux [x86_64])",\n  "network_id": 1,\n  "parent_network_id": 3652501241,\n  "stacks_tip_height": 61,\n  "stacks_tip": "e08b2fe3dce36fd6d015c2a839c8eb0885cbe29119c1e2a581f75bc5814bce6f",\n  "stacks_tip_consensus_hash": "ad9f4cb6155a5b4f5dcb719d0f6bee043038bc63",\n  "genesis_chainstate_hash": "74237aa39aa50a83de11a4f53e9d3bb7d43461d1de9873f402e5453ae60bc59b",\n  "unanchored_tip": "74d172df8f8934b468c5b0af2efdefe938e9848772d69bcaeffcfe1d6c6ef041",\n  "unanchored_seq": 0,\n  "exit_at_block_height": null\n}\n')),(0,i.kt)("p",null,"Now that everything is running, you can ",(0,i.kt)("a",{parentName:"p",href:"https://hirosystems.github.io/stacks-blockchain-api/"},"try some of these other API endpoints")))}h.isMDXComponent=!0}}]);