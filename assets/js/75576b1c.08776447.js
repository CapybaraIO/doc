"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[8312],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>k});var i=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,o=function(t,e){if(null==t)return{};var n,i,o={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=i.createContext({}),c=function(t){var e=i.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=c(t.components);return i.createElement(s.Provider,{value:e},t.children)},d="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},u=i.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),d=c(n),u=o,k=d["".concat(s,".").concat(u)]||d[u]||h[u]||r;return n?i.createElement(k,a(a({ref:e},p),{},{components:n})):i.createElement(k,a({ref:e},p))}));function k(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[d]="string"==typeof t?t:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},18914:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(87462),o=(n(67294),n(3905));const r={},a="Get Core API info",l={type:"api",id:"get-core-api-info",unversionedId:"get-core-api-info",title:"Get Core API info",description:"",slug:"/get-core-api-info",frontMatter:{},api:{description:"Retrieves information about the Core API including the server version",tags:["Info"],operationId:"get_core_api_info",responses:{200:{description:"Success",content:{"application/json":{schema:{description:"GET request that core node information",title:"CoreNodeInfoResponse",type:"object",additionalProperties:!1,required:["peer_version","pox_consensus","burn_block_height","stable_pox_consensus","stable_burn_block_height","server_version","network_id","parent_network_id","stacks_tip_height","stacks_tip","stacks_tip_consensus_hash","unanchored_tip","exit_at_block_height"],properties:{peer_version:{type:"integer",description:"identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade"},pox_consensus:{type:"string",description:"is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block"},burn_block_height:{type:"integer",description:"latest bitcoin chain height"},stable_pox_consensus:{type:"string",description:"same as burn_consensus, but evaluated at stable_burn_block_height"},stable_burn_block_height:{type:"integer",description:"leftover from stacks 1.0, basically always burn_block_height - 1"},server_version:{type:"string",description:"is a version descriptor"},network_id:{type:"integer",description:"is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change"},parent_network_id:{type:"integer",description:"same as network_id, but for bitcoin"},stacks_tip_height:{type:"integer",description:"the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height"},stacks_tip:{type:"string",description:"the best known block hash for the Stack chain (not including any pending microblocks)"},stacks_tip_consensus_hash:{type:"string",description:"the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined"},unanchored_tip:{type:"string",description:"the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned"},exit_at_block_height:{type:"integer",description:"the block height at which the testnet network will be reset. not applicable for mainnet"}}},example:{peer_version:385875968,pox_consensus:"17f76e597bab45646956f38dd39573085d72cbc0",burn_block_height:16,stable_pox_consensus:"8e0561978fc5506b68a589c402dad97e862edb59",stable_burn_block_height:15,server_version:"blockstack-core 0.0.1 => 23.0.0.0 (, release build, linux [x86_64])",network_id:2147483648,parent_network_id:3669344250,stacks_tip_height:15,stacks_tip:"b1807a2d3f7f8c7922f7c1d60d7c34145ade05d789640dc7dc9ec1021e07bb54",stacks_tip_consensus_hash:"17f76e597bab45646956f38dd39573085d72cbc0",unanchored_tip:"0000000000000000000000000000000000000000000000000000000000000000",exit_at_block_height:null}}}}},method:"get",path:"/v2/info",parameters:[],servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://docs.hiro.so/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get Core API info",description:{content:"Retrieves information about the Core API including the server version",type:"text/plain"},url:{path:["v2","info"],host:["{{baseUrl}}"],query:[],variable:[]},method:"GET"}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/doc/api/get-core-api-info",previous:{title:"Get estimated fee",permalink:"/doc/api/get-estimated-fee"},next:{title:"API status",permalink:"/doc/api/api-status"}},s=[],c={toc:s},p="wrapper";function d(t){let{components:e,...n}=t;return(0,o.kt)(p,(0,i.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-core-api-info"},"Get Core API info"),(0,o.kt)("p",null,"Retrieves information about the Core API including the server version"),(0,o.kt)("table",{style:{display:"table",width:"100%"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("div",{style:{display:"flex"}},(0,o.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,o.kt)("code",null,"200")),(0,o.kt)("div",null,(0,o.kt)("p",null,"Success"))),(0,o.kt)("div",null,(0,o.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,o.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,o.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,o.kt)("div",null)))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"peer_version"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"identifies the version number for the networking communication, this should not change while a node is running, and will only change if there's an upgrade")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"pox_consensus"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"is a hash used to identify the burnchain view for a node. it incorporates bitcoin chain information and PoX information. nodes that disagree on this value will appear to each other as forks. this value will change after every block")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"burn_block_height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"latest bitcoin chain height")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"stable_pox_consensus"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"same as burn_consensus, but evaluated at stable_burn_block_height")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"stable_burn_block_height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"leftover from stacks 1.0, basically always burn_block_height - 1")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"server_version"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"is a version descriptor")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"network_id"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"is similar to peer_version and will be used to differentiate between different testnets. this value will be different between mainnet and testnet. once launched, this value will not change")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"parent_network_id"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"same as network_id, but for bitcoin")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"stacks_tip_height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"the latest Stacks chain height. Stacks forks can occur independent of the Bitcoin chain, that height doesn't increase 1-to-1 with the Bitcoin height")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"stacks_tip"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"the best known block hash for the Stack chain (not including any pending microblocks)")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"stacks_tip_consensus_hash"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"the burn chain (i.e., bitcoin) consensus hash at the time that stacks_tip was mined")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"unanchored_tip"),(0,o.kt)("span",{style:{opacity:"0.6"}}," string"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"the latest microblock hash if any microblocks were processed. if no microblock has been processed for the current block, a 000.., hex array is returned")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"exit_at_block_height"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"the block height at which the testnet network will be reset. not applicable for mainnet"))))))))))))}d.isMDXComponent=!0}}]);