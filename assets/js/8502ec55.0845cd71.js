"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[1063],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>u});var i=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,i,o=function(t,e){if(null==t)return{};var n,i,o={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=i.createContext({}),d=function(t){var e=i.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},c=function(t){var e=d(t.components);return i.createElement(p.Provider,{value:e},t.children)},l="mdxType",y={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},_=i.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,p=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),l=d(n),_=o,u=l["".concat(p,".").concat(_)]||l[_]||y[_]||r;return n?i.createElement(u,a(a({ref:e},c),{},{components:n})):i.createElement(u,a({ref:e},c))}));function u(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,a=new Array(r);a[0]=_;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s[l]="string"==typeof t?t:o,a[1]=s;for(var d=2;d<r;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}_.displayName="MDXCreateElement"},15827:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),o=(n(67294),n(3905));const r={},a="Get dropped mempool transactions",s={type:"api",id:"get-dropped-mempool-transactions",unversionedId:"get-dropped-mempool-transactions",title:"Get dropped mempool transactions",description:"",slug:"/get-dropped-mempool-transactions",frontMatter:{},api:{tags:["Transactions"],operationId:"get_dropped_mempool_transaction_list",description:"Retrieves all recently-broadcast transactions that have been dropped from the mempool.\n\nTransactions are dropped from the mempool if:\n * they were stale and awaiting garbage collection or,\n * were expensive,  or\n * were replaced with a new fee\n",parameters:[{name:"limit",in:"query",description:"max number of mempool transactions to fetch",required:!1,schema:{type:"integer",default:96,maximum:200}},{name:"offset",in:"query",description:"index of first mempool transaction to fetch",required:!1,schema:{type:"integer"},example:42e3}],responses:{200:{description:"List of dropped mempool transactions",content:{"application/json":{schema:{description:"GET request that returns transactions",title:"MempoolTransactionListResponse",type:"object",additionalProperties:!1,required:["results","limit","offset","total"],properties:{limit:{type:"integer"},offset:{type:"integer"},total:{type:"integer"},results:{type:"array",items:{type:"object",title:"MempoolTransaction",description:"Describes all transaction types on Stacks 2.0 blockchain",anyOf:[{title:"MempoolTokenTransferTransaction",description:"Describes representation of a Type-0 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-0-transferring-an-asset",type:"object",required:["tx_type","token_transfer","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["token_transfer"]},token_transfer:{type:"object",required:["recipient_address","amount","memo"],additionalProperties:!1,properties:{recipient_address:{type:"string"},amount:{type:"string",description:"Transfer amount as Integer string (64-bit unsigned integer)"},memo:{type:"string",description:"Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string)"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolSmartContractTransaction",description:"Describes representation of a Type-1 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-1-instantiating-a-smart-contract",required:["tx_type","smart_contract","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["smart_contract"]},smart_contract:{type:"object",additionalProperties:!1,required:["contract_id","source_code"],properties:{clarity_version:{type:"number",description:"The Clarity version of the contract, only specified for versioned contract transactions, otherwise null",nullable:!0},contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},source_code:{type:"string",description:"Clarity code of the smart contract being deployed"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolContractCallTransaction",description:"Describes representation of a Type 2 Stacks 2.0 transaction: Contract Call",required:["tx_type","contract_call","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["contract_call"]},contract_call:{type:"object",additionalProperties:!1,required:["contract_id","function_name","function_signature"],properties:{contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},function_name:{type:"string",description:"Name of the Clarity function to be invoked"},function_signature:{type:"string",description:"Function definition, including function name and type as well as parameter names and types"},function_args:{type:"array",description:"List of arguments used to invoke the function",items:{type:"object",additionalProperties:!1,required:["hex","repr","name","type"],properties:{hex:{type:"string"},repr:{type:"string"},name:{type:"string"},type:{type:"string"}}}}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolPoisonMicroblockTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","poison_microblock","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["poison_microblock"]},poison_microblock:{type:"object",required:["microblock_header_1","microblock_header_2"],additionalProperties:!1,properties:{microblock_header_1:{type:"string",description:"Hex encoded microblock header"},microblock_header_2:{type:"string",description:"Hex encoded microblock header"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolCoinbaseTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","coinbase_payload","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["coinbase"]},coinbase_payload:{type:"object",additionalProperties:!1,required:["data"],properties:{data:{type:"string",description:"Hex encoded 32-byte scratch space for block leader's use"},alt_recipient:{type:"string",nullable:!0,description:"A principal that will receive the miner rewards for this coinbase transaction. Can be either a standard principal or contract principal. Only specified for `coinbase-to-alt-recipient` transaction types, otherwise null."}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}}]}}}},example:{limit:96,offset:0,total:5,results:[{tx_id:"0xb31df5a363dad31723324cb5e0eefa04d491519fd30827a521cbc830114aa50c",tx_status:"pending",tx_type:"token_transfer",receipt_time:1598288370,receipt_time_iso:"2020-08-24T16:59:30.000Z",fee_rate:"180",sender_address:"STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6",sponsored:!1,post_condition_mode:"deny",post_conditions:[],anchor_mode:"any",token_transfer:{recipient_address:"ST1GY25DM8RZV4X15X07THRZ2C5NMWPGQWKFGV87F",amount:"500000",memo:"0x46617563657400000000000000000000000000000000000000000000000000000000"}},{tx_id:"0x5bed8e3f801cb4e2c74d2815a092f7c1c6a35f2fce4a80c80ca70848d34cb395",tx_status:"pending",tx_type:"token_transfer",receipt_time:1598282326,receipt_time_iso:"2020-08-24T15:18:46.000Z",fee_rate:"180",sender_address:"ST1PS1KF93VBY5A1JV7TM66KN046KP3E3761DBSAG",sponsored:!1,post_condition_mode:"deny",post_conditions:[],anchor_mode:"any",token_transfer:{recipient_address:"ST2H33S8SEY27QKEKQKR6S5PECYPKY45CQYGGQR8X",amount:"1000",memo:"0x00000000000000000000000000000000000000000000000000000000000000000000"}},{tx_id:"0x9916036fde08a207e581cdcabc18ff55469861cb81194ab0e3e7c9a02cd5a17c",tx_status:"pending",tx_type:"smart_contract",receipt_time:1598258958,receipt_time_iso:"2020-08-24T08:49:18.000Z",fee_rate:"2000",sender_address:"ST2R1XSFXYHCSFE426HP45TTD8ZWV9XHX2SRP3XA8",sponsored:!1,post_condition_mode:"deny",post_conditions:[],anchor_mode:"any",smart_contract:{contract_id:"ST2R1XSFXYHCSFE426HP45TTD8ZWV9XHX2SRP3XA8.test-loans-1",source_code:"(define-data-var stx-loaned int 0)\n(define-data-var lockup-period int 0)\n(define-data-var stx-return int 0)\n(define-public (get-stx-return (stx uint) (months uint))\n    (ok\n        (begin\n            (var-set stx-loaned (to-int(stx))\n            (var-set lockup-period (to-int(months))\n            (calculate-stx-return)\n            (print (var-get stx-return))\n            (transfer-to-server)\n        )\n    )\n)\n(define-private (calculate-stx-return)\n    (ok\n        (begin\n            (var-set stx-return (- (+ (* (/ (* (var-get stx-loaned) 5) 100) (var-get lockup-period)) (var-get stx-loaned)) 5))\n        )\n    )\n)\n(define-private (transfer-to-server)\n  (begin\n    (unwrap-panic (stx-transfer? (to-uint (var-get stx-loaned)) tx-sender 'ST2R1XSFXYHCSFE426HP45TTD8ZWV9XHX2SRP3XA8))\n    (ok (to-uint (var-get stx-loaned)))\n  )\n)"}},{tx_id:"0x871fb186c8d6ac6ede2822c71074d9884b593c0d7f2d0d6e8516e615484d7501",tx_status:"pending",tx_type:"smart_contract",receipt_time:1598230365,receipt_time_iso:"2020-08-24T00:52:45.000Z",fee_rate:"2000",sender_address:"ST1FJGMWPGM1P7N0K3N9QEPZK5H1VDC5YWTVMEAZ1",sponsored:!1,post_condition_mode:"deny",post_conditions:[],anchor_mode:"any",smart_contract:{contract_id:"ST1FJGMWPGM1P7N0K3N9QEPZK5H1VDC5YWTVMEAZ1.contract-hook-1598230358601",source_code:';; ## CUSTOM FUNCTION TO EXTRACT A SUBSTRING\n\n(define-read-only (subs (source (buff 10)) \n                        (start int) \n                        (end int))\n (begin\n  (unwrap-panic (if (and (<= 0 start) (<= start 10)) (ok 1) (err "Out of bounds: start")))\n  (unwrap-panic (if (and (<= 0 end) (<= end 10)) (ok 1) (err "Out of bounds: end")))\n  (let ((temp1 (fold subs1 source \n                  {start: start, end: end, cursor: 1, data: ""})))\n   (let ((data (get data temp1))) \n       data))))\n\n    \n;; Call the function to extract the substring between the bounds:\n\n;; (subs "123456789" 2 5)\n\n(define-read-only (subs1 \n                    (ch (buff 1))\n                    (acc {data: (buff 10), \n                          start: int,\n                          end: int,\n                          cursor: int})) \n  (let ((data (get data acc))\n        (start (get start acc))\n        (cursor (get cursor acc))\n        (end (get end acc)))                                     \n    (let ((temp2 \n           {cursor: (+ 1 cursor),\n            data: (default-to ""\n                     (as-max-len?\n                       (concat data \n                         (if (let ((temp3 start)\n                                   (temp4 cursor)\n                                   (temp5 end))\n                              (and (<= temp3 temp4)\n                               (<= temp4 temp5)))\n                           ch \n                           ""))\n                       u10))}))\n     {start: (get start acc),\n      end: (get end acc),\n      cursor: (get cursor temp2),\n      data: (get data temp2)})))\n'}},{tx_id:"0x66df10d99d3a26018f521d60e9f744b083386c73e47ad39c394d570abee55f1f",tx_status:"pending",tx_type:"smart_contract",receipt_time:1598230066,receipt_time_iso:"2020-08-24T00:47:46.000Z",fee_rate:"2000",sender_address:"ST1FJGMWPGM1P7N0K3N9QEPZK5H1VDC5YWTVMEAZ1",sponsored:!1,post_condition_mode:"deny",post_conditions:[],anchor_mode:"any",smart_contract:{contract_id:"ST1FJGMWPGM1P7N0K3N9QEPZK5H1VDC5YWTVMEAZ1.contract-hook-1598230054238",source_code:'(define-read-only (subs1 \n                    (ch (buff 1))\n                    (acc {data: (buff 10), \n                          start: int,\n                          end: int,\n                          cursor: int}))\n (begin\n  (unwrap-panic (if (and (<= 1 (get start acc)) (<= (get start acc) 10)) (ok 1) (err "Out of bounds: start")))\n  (unwrap-panic (if (and (<= 1 (get end acc)) (<= (get end acc) 10)) (ok 1) (err "Out of bounds: end")))\n  (unwrap-panic (if (and (<= 1 (get cursor acc)) (<= (get cursor acc) 10)) (ok 1) (err "Out of bounds: cursor")))\n  (let ((data (get data acc))\n        (start (get start acc))\n        (cursor (get cursor acc))\n        (end (get end acc)))                                     \n    (let ((temp1 \n           {cursor: (+ 1 cursor),\n            data: (default-to ""\n                     (as-max-len?\n                       (concat data \n                         (if (let ((temp2 start)\n                                   (temp3 cursor)\n                                   (temp4 end))\n                              (and (<= temp2 temp3)\n                               (<= temp3 temp4)))\n                           ch \n                           ""))\n                       u10))}))\n     {start: (get start acc),\n      end: (get end acc),\n      cursor: (get cursor temp1),\n      data: (get data temp1)}))))\n'}},{tx_id:"0x7402d8e52204d6c8cba7465e159e79750338c3ee31d4fe6ddef1d4d226304b65",nonce:1,fee_rate:"227",sender_address:"SP1HJDP35SSMYP98CG8SHMYHMZDK0A495ZCH6ARYS",sponsored:!1,post_condition_mode:"deny",post_conditions:[{type:"stx",condition_code:"sent_equal_to",amount:"88884500",principal:{type_id:"principal_standard",address:"SP2J6HSSDYSTM71S0K0KK4YWRKX59JN1AD52M4B59"}}],anchor_mode:"any",tx_status:"pending",receipt_time:1626286631,receipt_time_iso:"2021-07-14T18:17:11.000Z",tx_type:"contract_call",contract_call:{contract_id:"SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.send-many-memo",function_name:"send-many",function_signature:"(define-public (send-many (recipients (list 200 (tuple (memo (buff 34)) (to principal) (ustx uint))))))",function_args:[{hex:"0x0b000000010c00000003046d656d6f020000000e357a62597346716a52336d736b7102746f0516b734e97043840503dc1091661c105d32b7c5c75d047573747801000000000000000000000000054c4514",repr:"(list (tuple (memo 0x357a62597346716a52336d736b71) (to SP2VK9TBG8E20A0YW228PC70GBMSBFHE7BNVMKB57) (ustx u88884500)))",name:"recipients",type:"(list 200 (tuple (memo (buff 34)) (to principal) (ustx uint)))"}]}}]}}}}},method:"get",path:"/extended/v1/tx/mempool/dropped",servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://docs.hiro.so/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get dropped mempool transactions",description:{content:"Retrieves all recently-broadcast transactions that have been dropped from the mempool.\n\nTransactions are dropped from the mempool if:\n * they were stale and awaiting garbage collection or,\n * were expensive,  or\n * were replaced with a new fee\n",type:"text/plain"},url:{path:["extended","v1","tx","mempool","dropped"],host:["{{baseUrl}}"],query:[{description:{content:"max number of mempool transactions to fetch",type:"text/plain"},key:"limit",value:"96"},{description:{content:"index of first mempool transaction to fetch",type:"text/plain"},key:"offset",value:"<integer>"}],variable:[]},method:"GET"}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/api/get-dropped-mempool-transactions",previous:{title:"Get mempool transactions",permalink:"/api/get-mempool-transactions"},next:{title:"Get statistics for mempool transactions",permalink:"/api/get-statistics-for-mempool-transactions"}},p=[],d={toc:p},c="wrapper";function l(t){let{components:e,...n}=t;return(0,o.kt)(c,(0,i.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-dropped-mempool-transactions"},"Get dropped mempool transactions"),(0,o.kt)("p",null,"Retrieves all recently-broadcast transactions that have been dropped from the mempool."),(0,o.kt)("p",null,"Transactions are dropped from the mempool if:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"they were stale and awaiting garbage collection or,"),(0,o.kt)("li",{parentName:"ul"},"were expensive,  or"),(0,o.kt)("li",{parentName:"ul"},"were replaced with a new fee")),(0,o.kt)("table",{style:{display:"table",width:"100%"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Query Parameters"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"limit"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Possible values:")," value \u2264 200")),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"max number of mempool transactions to fetch")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"offset"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,o.kt)("p",null,"index of first mempool transaction to fetch")),(0,o.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 42000"))))),(0,o.kt)("table",{style:{display:"table",width:"100%"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("div",{style:{display:"flex"}},(0,o.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,o.kt)("code",null,"200")),(0,o.kt)("div",null,(0,o.kt)("p",null,"List of dropped mempool transactions"))),(0,o.kt)("div",null,(0,o.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,o.kt)("thead",null,(0,o.kt)("tr",null,(0,o.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,o.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,o.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,o.kt)("div",null)))),(0,o.kt)("tbody",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"limit"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"offset"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"total"),(0,o.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,o.kt)("tr",null,(0,o.kt)("td",null,(0,o.kt)("code",null,"results"),(0,o.kt)("span",{style:{opacity:"0.6"}}," object[]")))))))))))}l.isMDXComponent=!0}}]);