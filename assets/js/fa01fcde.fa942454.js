"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[6135],{3905:(t,e,o)=>{o.d(e,{Zo:()=>p,kt:()=>m});var l=o(67294);function i(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function n(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.push.apply(o,l)}return o}function r(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(Object(o),!0).forEach((function(e){i(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function c(t,e){if(null==t)return{};var o,l,i=function(t,e){if(null==t)return{};var o,l,i={},n=Object.keys(t);for(l=0;l<n.length;l++)o=n[l],e.indexOf(o)>=0||(i[o]=t[o]);return i}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(l=0;l<n.length;l++)o=n[l],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(t,o)&&(i[o]=t[o])}return i}var a=l.createContext({}),s=function(t){var e=l.useContext(a),o=e;return t&&(o="function"==typeof t?t(e):r(r({},e),t)),o},p=function(t){var e=s(t.components);return l.createElement(a.Provider,{value:e},t.children)},k="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},h=l.forwardRef((function(t,e){var o=t.components,i=t.mdxType,n=t.originalType,a=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),k=s(o),h=i,m=k["".concat(a,".").concat(h)]||k[h]||d[h]||n;return o?l.createElement(m,r(r({ref:e},p),{},{components:o})):l.createElement(m,r({ref:e},p))}));function m(t,e){var o=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var n=o.length,r=new Array(n);r[0]=h;var c={};for(var a in e)hasOwnProperty.call(e,a)&&(c[a]=e[a]);c.originalType=t,c[k]="string"==typeof t?t:i,r[1]=c;for(var s=2;s<n;s++)r[s]=o[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,o)}h.displayName="MDXCreateElement"},68975:(t,e,o)=>{o.r(e),o.d(e,{contentTitle:()=>r,default:()=>k,frontMatter:()=>n,metadata:()=>c,toc:()=>a});var l=o(87462),i=(o(67294),o(3905));const n={},r="Get recent microblocks",c={type:"api",id:"get-recent-microblocks",unversionedId:"get-recent-microblocks",title:"Get recent microblocks",description:"",slug:"/get-recent-microblocks",frontMatter:{},api:{tags:["Microblocks"],operationId:"get_microblock_list",description:"Retrieves a list of microblocks.\n\nIf you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n",parameters:[{name:"limit",in:"query",description:"Max number of microblocks to fetch",required:!1,schema:{type:"integer",default:20,maximum:200},example:100},{name:"offset",in:"query",description:"Index of the first microblock to fetch",required:!1,schema:{type:"integer"},example:42e3}],responses:{200:{description:"List of microblocks",content:{"application/json":{schema:{description:"GET request that returns microblocks",additionalProperties:!1,title:"MicroblockListResponse",type:"object",required:["results","limit","offset","total"],properties:{limit:{type:"integer",maximum:30,description:"The number of microblocks to return"},offset:{type:"integer",description:"The number to microblocks to skip (starting at `0`)",default:0},total:{type:"integer",description:"The number of microblocks available"},results:{type:"array",items:{title:"Microblock",description:"A microblock",type:"object",required:["canonical","microblock_canonical","microblock_hash","microblock_sequence","microblock_parent_hash","block_height","parent_block_height","parent_block_hash","block_hash","txs","parent_burn_block_time","parent_burn_block_time_iso","parent_burn_block_hash","parent_burn_block_height"],additionalProperties:!1,properties:{canonical:{type:"boolean",description:"Set to `true` if the microblock corresponds to the canonical chain tip."},microblock_canonical:{type:"boolean",description:"Set to `true` if the microblock was not orphaned in a following anchor block. Defaults to `true` if the following anchor block has not yet been created."},microblock_hash:{type:"string",description:"The SHA512/256 hash of this microblock."},microblock_sequence:{type:"integer",description:"A hint to describe how to order a set of microblocks. Starts at 0."},microblock_parent_hash:{type:"string",description:"The SHA512/256 hash of the previous signed microblock in this stream."},block_height:{type:"integer",description:"The anchor block height that confirmed this microblock."},parent_block_height:{type:"integer",description:"The height of the anchor block that preceded this microblock."},parent_block_hash:{type:"string",description:"The hash of the anchor block that preceded this microblock."},parent_burn_block_hash:{type:"string",description:"The hash of the Bitcoin block that preceded this microblock."},parent_burn_block_time:{type:"integer",description:"The block timestamp of the Bitcoin block that preceded this microblock."},parent_burn_block_time_iso:{type:"string",description:"The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock."},parent_burn_block_height:{type:"integer",description:"The height of the Bitcoin block that preceded this microblock."},block_hash:{type:"string",description:"The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks",nullable:!0},txs:{type:"array",description:"List of transactions included in the microblock",items:{type:"string",description:"Transaction ID"}}}}}}}}}}},method:"get",path:"/extended/v1/microblock",servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://docs.hiro.so/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get recent microblocks",description:{content:"Retrieves a list of microblocks.\n\nIf you need to actively monitor new microblocks, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n",type:"text/plain"},url:{path:["extended","v1","microblock"],host:["{{baseUrl}}"],query:[{description:{content:"Max number of microblocks to fetch",type:"text/plain"},key:"limit",value:"20"},{description:{content:"Index of the first microblock to fetch",type:"text/plain"},key:"offset",value:"<integer>"}],variable:[]},method:"GET"}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/doc/api/get-recent-microblocks",previous:{title:"Broadcast raw transaction",permalink:"/doc/api/broadcast-raw-transaction"},next:{title:"Get microblock",permalink:"/doc/api/get-microblock"}},a=[],s={toc:a},p="wrapper";function k(t){let{components:e,...o}=t;return(0,i.kt)(p,(0,l.Z)({},s,o,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-recent-microblocks"},"Get recent microblocks"),(0,i.kt)("p",null,"Retrieves a list of microblocks."),(0,i.kt)("p",null,"If you need to actively monitor new microblocks, we highly recommend subscribing to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api/tree/master/client"},"WebSockets or Socket.io")," for real-time updates."),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Query Parameters"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"limit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," value \u2264 200")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Max number of microblocks to fetch")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 100"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"offset"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Index of the first microblock to fetch")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 42000"))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"200")),(0,i.kt)("div",null,(0,i.kt)("p",null,"List of microblocks"))),(0,i.kt)("div",null,(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"limit"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Possible values:")," value \u2264 30")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The number of microblocks to return")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"offset"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The number to microblocks to skip (starting at ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),")")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"total"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The number of microblocks available")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"results"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]"),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"canonical"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the microblock corresponds to the canonical chain tip.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"microblock_canonical"),(0,i.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the microblock was not orphaned in a following anchor block. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the following anchor block has not yet been created.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"microblock_hash"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The SHA512/256 hash of this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"microblock_sequence"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"A hint to describe how to order a set of microblocks. Starts at 0.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"microblock_parent_hash"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The SHA512/256 hash of the previous signed microblock in this stream.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"block_height"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The anchor block height that confirmed this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_block_height"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The height of the anchor block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_block_hash"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The hash of the anchor block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_burn_block_hash"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The hash of the Bitcoin block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_burn_block_time"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The block timestamp of the Bitcoin block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_burn_block_time_iso"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) formatted block time of the bitcoin block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"parent_burn_block_height"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The height of the Bitcoin block that preceded this microblock.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"block_hash"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The hash of the anchor block that confirmed this microblock. This wil be empty for unanchored microblocks")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"txs"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string[]"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"List of transactions included in the microblock"))))))))))))))))}k.isMDXComponent=!0}}]);