"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[5022],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=i,k=p["".concat(c,".").concat(h)]||p[h]||u[h]||r;return n?o.createElement(k,a(a({ref:t},d),{},{components:n})):o.createElement(k,a({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<r;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},35968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(87462),i=(n(67294),n(3905));const r={title:"Run Ordhook as a Service Using Bitcoind"},a=void 0,l={unversionedId:"ordhook/guides/ordhook-as-a-service-bitcoind",id:"ordhook/guides/ordhook-as-a-service-bitcoind",title:"Run Ordhook as a Service Using Bitcoind",description:"Prerequisites",source:"@site/docs/ordhook/guides/ordhook-as-a-service-bitcoind.md",sourceDirName:"ordhook/guides",slug:"/ordhook/guides/ordhook-as-a-service-bitcoind",permalink:"/ordhook/guides/ordhook-as-a-service-bitcoind",draft:!1,editUrl:"https://github.com/hirosystems/docs/tree/main/docs/ordhook/guides/ordhook-as-a-service-bitcoind.md",tags:[],version:"current",frontMatter:{title:"Run Ordhook as a Service Using Bitcoind"},sidebar:"ordhook",previous:{title:"Getting Started",permalink:"/ordhook/getting-started"},next:{title:"Scan Ordinal Activities in Your Terminal",permalink:"/ordhook/guides/scan-ordinal-activities"}},c={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting Up a Bitcoin Node",id:"setting-up-a-bitcoin-node",level:3},{value:"Configure Ordhook",id:"configure-ordhook",level:3},{value:"Initiate Ordhook Service",id:"initiate-ordhook-service",level:2},{value:"Add <code>http-post</code> endpoints dynamically",id:"add-http-post-endpoints-dynamically",level:3},{value:"Run ordhook service",id:"run-ordhook-service",level:2}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("h3",{id:"setting-up-a-bitcoin-node"},"Setting Up a Bitcoin Node"),(0,i.kt)("p",null,"The Bitcoin Core daemon (bitcoind) is a program that implements the Bitcoin protocol for remote procedure call (RPC) use. Ordhook can be set up to interact with the Bitcoin chainstate through bitcoind's ZeroMQ interface, its embedded networking library, passing raw blockchain data to be evaluated for relevant events."),(0,i.kt)("p",null,"This guide is written to work with the latest Bitcoin Core software containing bitcoind, ",(0,i.kt)("a",{parentName:"p",href:"https://bitcoincore.org/bin/bitcoin-core-25.0/"},"Bitcoin Core 25.0"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))),(0,i.kt)("p",{parentName:"blockquote"},"While bitcoind can and will start syncing a Bitcoin node, customizing this node to your use cases beyond supporting a Ordhook is out of scope for this guide. See the Bitcoin wiki for ",(0,i.kt)("a",{parentName:"p",href:"https://en.bitcoin.it/wiki/Running_Bitcoin"},'"Running Bitcoin"')," or bitcoin.org ",(0,i.kt)("a",{parentName:"p",href:"https://bitcoin.org/en/full-node"},"Running A Full Node guide"),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Make note of the path of your ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoind")," executable (located within the ",(0,i.kt)("inlineCode",{parentName:"li"},"bin")," directory of the ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin-25.0")," folder you downloaded above appropriate to your operating system)"),(0,i.kt)("li",{parentName:"ul"},"Navigate to your project folder where your Ordhook node will reside, create a new file, and rename it to ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf"),". Copy the configuration below to this ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf")," file."),(0,i.kt)("li",{parentName:"ul"},"Find and copy your Bitcoin data directory and paste to the ",(0,i.kt)("inlineCode",{parentName:"li"},"datadir")," field in the ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf")," file below. Either copy the default path (see ",(0,i.kt)("a",{parentName:"li",href:"https://en.bitcoin.it/wiki/Data_directory"},"list of default directories by operating system"),") or copy the custom path you set for your Bitcoin data"),(0,i.kt)("li",{parentName:"ul"},"Set a username of your choice for bitcoind and use it in the ",(0,i.kt)("inlineCode",{parentName:"li"},"rpcuser")," configuration below (",(0,i.kt)("inlineCode",{parentName:"li"},"devnet")," is a default)."),(0,i.kt)("li",{parentName:"ul"},"Set a password of your choice for bitcoind and use it in the ",(0,i.kt)("inlineCode",{parentName:"li"},"rpcpassword")," configuration below (",(0,i.kt)("inlineCode",{parentName:"li"},"devnet")," is a default).")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-conf"},"# Bitcoin Core Configuration\n\ndatadir=/path/to/bitcoin/directory/ # Path to Bitcoin directory\nserver=1\nrpcuser=devnet\nrpcpassword=devnet\nrpcport=8332\nrpcallowip=0.0.0.0/0\nrpcallowip=::/0\ntxindex=1\nlisten=1\ndiscover=0\ndns=0\ndnsseed=0\nlistenonion=0\nrpcserialversion=1\ndisablewallet=0\nfallbackfee=0.00001\nrpcthreads=8\nblocksonly=1\ndbcache=4096\n\n# Start zeromq\nzmqpubhashblock=tcp://0.0.0.0:18543\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))),(0,i.kt)("p",{parentName:"blockquote"},"The below command is a startup process that, if this is your first time syncing a node, might take a few hours to a few days to run. Alternatively, if the directory pointed to in the ",(0,i.kt)("inlineCode",{parentName:"p"},"datadir")," field above contains bitcoin blockchain data, syncing will resume.")),(0,i.kt)("p",null,"Now that you have the ",(0,i.kt)("inlineCode",{parentName:"p"},"bitcoin.conf")," file ready with the bitcoind configurations, you can run the bitcoind node. The command takes the form ",(0,i.kt)("inlineCode",{parentName:"p"},"path/to/bitcoind -conf=path/to/bitcoin.conf"),", for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"/Volumes/SSD/bitcoin-25.0/bin/bitcoind -conf=/Volumes/SSD/project/Ordhook/bitcoin.conf\n")),(0,i.kt)("p",null,"Once the above command runs, you will see ",(0,i.kt)("inlineCode",{parentName:"p"},"zmq_url")," entries in the console's stdout, displaying ZeroMQ logs of your bitcoin node."),(0,i.kt)("h3",{id:"configure-ordhook"},"Configure Ordhook"),(0,i.kt)("p",null,"In this section, you will configure Ordhook to match the network configurations with the bitcoin config file. First, ",(0,i.kt)("a",{parentName:"p",href:"/ordhook/getting-started#installing-ordhook"},"install the latest version of Ordhook"),"."),(0,i.kt)("p",null,"Next, you will generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordhook.toml")," file to connect Ordhook with your bitcoind node. Navigate to the directory where you want to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordhook.toml")," file and use the following command in your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"ordhook config generate --mainnet\n")),(0,i.kt)("p",null,"Several network parameters in the generated ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordhook.toml")," configuration file need to match those in the ",(0,i.kt)("inlineCode",{parentName:"p"},"bitcoin.conf")," file created earlier in the ",(0,i.kt)("a",{parentName:"p",href:"#setting-up-a-bitcoin-node"},"Setting up a Bitcoin Node")," section. Please update the following parameters accordingly:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Update ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoind_rpc_username")," with the username set for ",(0,i.kt)("inlineCode",{parentName:"li"},"rpcuser")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf"),"."),(0,i.kt)("li",{parentName:"ol"},"Update ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoind_rpc_password")," with the password set for ",(0,i.kt)("inlineCode",{parentName:"li"},"rpcpassword")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf"),"."),(0,i.kt)("li",{parentName:"ol"},"Update ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoind_rpc_url")," with the same host and port used for ",(0,i.kt)("inlineCode",{parentName:"li"},"rpcport")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"bitcoin.conf"),".")),(0,i.kt)("p",null,"Additionally, if you want to receive events from the configured Bitcoin node, substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"stacks_node_rpc_url")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"bitcoind_zmq_url"),", as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[storage]\nworking_dir = "ordhook"\n\n# The Http Api allows you to register / deregister\n# dynamically predicates.\n# Disable by default.\n#\n# [http_api]\n# http_port = 20456\n# database_uri = "redis://localhost:6379/"\n\n[network]\nmode = "mainnet"\nbitcoind_rpc_url = "http://0.0.0.0:8332"\nbitcoind_rpc_username = "devnet"\nbitcoind_rpc_password = "devnet"\n# Bitcoin block events can be received by Chainhook\n# either through a Bitcoin node\'s ZeroMQ interface,\n# or through the Stacks node. Zmq is being\n# used by default:\nbitcoind_zmq_url = "tcp://0.0.0.0:18543"\n# but stacks can also be used:\n# stacks_node_rpc_url = "http://0.0.0.0:20443"\n\n[limits]\nmax_number_of_bitcoin_predicates = 100\nmax_number_of_concurrent_bitcoin_scans = 100\nmax_number_of_processing_threads = 16\nbitcoin_concurrent_http_requests_max = 16\nmax_caching_memory_size_mb = 32000\n\n# Disable the following section if the state\n# must be built locally\n[bootstrap]\ndownload_url = "https://archive.hiro.so/mainnet/ordhook/mainnet-ordhook-sqlite-latest"\n\n[logs]\nordinals_internals = true\nchainhook_internals = true\n')),(0,i.kt)("p",null,"Here is a table of the relevant parameters this guide changes in our configuration files."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"bitcoin.conf"),(0,i.kt)("th",{parentName:"tr",align:null},"Ordhook.toml"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rpcuser"),(0,i.kt)("td",{parentName:"tr",align:null},"bitcoind_rpc_username")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rpcpassword"),(0,i.kt)("td",{parentName:"tr",align:null},"bitcoind_rpc_password")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rpcport"),(0,i.kt)("td",{parentName:"tr",align:null},"bitcoind_rpc_url")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zmqpubhashblock"),(0,i.kt)("td",{parentName:"tr",align:null},"bitcoind_zmq_url")))),(0,i.kt)("h2",{id:"initiate-ordhook-service"},"Initiate Ordhook Service"),(0,i.kt)("p",null,"In this section, you'll learn how to run Ordhook as a service using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/ordhook/tree/develop/components/ordhook-sdk-js"},"Ordhook SDK")," to post events to a server."),(0,i.kt)("p",null,"Use the following command to start the Ordhook service for streaming and processing new blocks appended to the Bitcoin blockchain:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ordhook service start --post-to=http://localhost:3000/api/events --config-path=./Ordhook.toml")),(0,i.kt)("p",null,"When the Ordhook service starts, it is initiated in the background to augment the blocks from Bitcoin. Bitcoind sends ZeroMQ notifications to Ordhook to retrieve the inscriptions."),(0,i.kt)("h3",{id:"add-http-post-endpoints-dynamically"},"Add ",(0,i.kt)("inlineCode",{parentName:"h3"},"http-post")," endpoints dynamically"),(0,i.kt)("p",null,"To enable dynamically posting endpoints to the server, you can spin up the Redis server by enabling the following lines of code in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordhook.toml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[http_api]\nhttp_port = 20456\ndatabase_uri = "redis://localhost:6379/"\n')),(0,i.kt)("h2",{id:"run-ordhook-service"},"Run ordhook service"),(0,i.kt)("p",null,"Based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Ordhook.toml")," file configuration, the ordhook service spins up an HTTP API to manage event destinations. Use the following command to start the ordhook service:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ordhook service start --config-path=./Ordhook.toml")),(0,i.kt)("p",null,"A comprehensive OpenAPI specification explaining how to interact with this HTTP REST API can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/ordhook/blob/develop/docs/ordhook-openapi.json"},"here"),"."))}u.isMDXComponent=!0}}]);