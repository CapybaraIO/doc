"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[8224],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(n),f=i,m=p["".concat(l,".").concat(f)]||p[f]||h[f]||o;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},57349:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const o={},s="Get approximate fees for a given transaction",r={type:"api",id:"get-approximate-fees-for-a-given-transaction",unversionedId:"get-approximate-fees-for-a-given-transaction",title:"Get approximate fees for a given transaction",description:"",slug:"/get-approximate-fees-for-a-given-transaction",frontMatter:{},api:{tags:["Fees"],description:"Get an estimated fee for the supplied transaction.  This\nestimates the execution cost of the transaction, the current\nfee rate of the network, and returns estimates for fee\namounts.\n* `transaction_payload` is a hex-encoded serialization of\n  the TransactionPayload for the transaction.\n* `estimated_len` is an optional argument that provides the\n  endpoint with an estimation of the final length (in bytes)\n  of the transaction, including any post-conditions and\n  signatures\nIf the node cannot provide an estimate for the transaction\n(e.g., if the node has never seen a contract-call for the\ngiven contract and function) or if estimation is not\nconfigured on this node, a 400 response is returned.\nThe 400 response will be a JSON error containing a `reason`\nfield which can be one of the following:\n* `DatabaseError` - this Stacks node has had an internal\n  database error while trying to estimate the costs of the\n  supplied transaction.\n* `NoEstimateAvailable` - this Stacks node has not seen this\n  kind of contract-call before, and it cannot provide an\n  estimate yet.\n* `CostEstimationDisabled` - this Stacks node does not perform\n  fee or cost estimation, and it cannot respond on this\n  endpoint.\nThe 200 response contains the following data:\n* `estimated_cost` - the estimated multi-dimensional cost of\n  executing the Clarity VM on the provided transaction.\n* `estimated_cost_scalar` - a unitless integer that the Stacks\n  node uses to compare how much of the block limit is consumed\n  by different transactions. This value incorporates the\n  estimated length of the transaction and the estimated\n  execution cost of the transaction. The range of this integer\n  may vary between different Stacks nodes. In order to compute\n  an estimate of total fee amount for the transaction, this\n  value is multiplied by the same Stacks node's estimated fee\n  rate.\n* `cost_scalar_change_by_byte` - a float value that indicates how\n  much the `estimated_cost_scalar` value would increase for every\n  additional byte in the final transaction.\n* `estimations` - an array of estimated fee rates and total fees to\n  pay in microSTX for the transaction. This array provides a range of\n  estimates (default: 3) that may be used. Each element of the array\n  contains the following fields:\n    * `fee_rate` - the estimated value for the current fee\n      rates in the network\n    * `fee` - the estimated value for the total fee in\n      microSTX that the given transaction should pay. These\n      values are the result of computing:\n      `fee_rate` x `estimated_cost_scalar`.\n      If the estimated fees are less than the minimum relay\n      fee `(1 ustx x estimated_len)`, then that minimum relay\n      fee will be returned here instead.\nNote: If the final transaction's byte size is larger than\nsupplied to `estimated_len`, then applications should increase\nthis fee amount by:\n  `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`)\n",operationId:"post_fee_transaction",requestBody:{content:{"application/json":{schema:{description:"POST request for estimated fee",title:"TransactionFeeEstimateRequest",type:"object",additionalProperties:!1,required:["transaction_payload"],properties:{transaction_payload:{type:"string"},estimated_len:{type:"integer"}}},example:{estimated_len:350,transaction_payload:"021af942874ce525e87f21bbe8c121b12fac831d02f4086765742d696e666f0b7570646174652d696e666f00000000"}}}},responses:{200:{description:"Estimated fees for the transaction",content:{"application/json":{schema:{description:"POST response for estimated fee",title:"TransactionFeeEstimateResponse",type:"object",additionalProperties:!1,required:["estimated_cost","estimated_cost_scalar"],properties:{estimated_cost_scalar:{type:"integer"},cost_scalar_change_by_byte:{type:"number"},estimated_cost:{type:"object",additionalProperties:!1,required:["read_count","write_count","read_length","write_length","runtime"],properties:{read_count:{type:"integer"},read_length:{type:"integer"},runtime:{type:"integer"},write_count:{type:"integer"},write_length:{type:"integer"}}},estimations:{type:"array",items:{type:"object",properties:{fee_rate:{type:"number"},fee:{type:"number"}}}}}},example:{cost_scalar_change_by_byte:.00476837158203125,estimated_cost:{read_count:19,read_length:4814,runtime:7175e3,write_count:2,write_length:1020},estimated_cost_scalar:14,estimations:[{fee:17,fee_rate:1.2410714285714286},{fee:125,fee_rate:8.958333333333332},{fee:140,fee_rate:10}]}}}}},method:"post",path:"/v2/fees/transaction",parameters:[],servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],jsonRequestBodyExample:{transaction_payload:"string",estimated_len:0},info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://docs.hiro.so/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get approximate fees for a given transaction",description:{content:"Get an estimated fee for the supplied transaction.  This\nestimates the execution cost of the transaction, the current\nfee rate of the network, and returns estimates for fee\namounts.\n* `transaction_payload` is a hex-encoded serialization of\n  the TransactionPayload for the transaction.\n* `estimated_len` is an optional argument that provides the\n  endpoint with an estimation of the final length (in bytes)\n  of the transaction, including any post-conditions and\n  signatures\nIf the node cannot provide an estimate for the transaction\n(e.g., if the node has never seen a contract-call for the\ngiven contract and function) or if estimation is not\nconfigured on this node, a 400 response is returned.\nThe 400 response will be a JSON error containing a `reason`\nfield which can be one of the following:\n* `DatabaseError` - this Stacks node has had an internal\n  database error while trying to estimate the costs of the\n  supplied transaction.\n* `NoEstimateAvailable` - this Stacks node has not seen this\n  kind of contract-call before, and it cannot provide an\n  estimate yet.\n* `CostEstimationDisabled` - this Stacks node does not perform\n  fee or cost estimation, and it cannot respond on this\n  endpoint.\nThe 200 response contains the following data:\n* `estimated_cost` - the estimated multi-dimensional cost of\n  executing the Clarity VM on the provided transaction.\n* `estimated_cost_scalar` - a unitless integer that the Stacks\n  node uses to compare how much of the block limit is consumed\n  by different transactions. This value incorporates the\n  estimated length of the transaction and the estimated\n  execution cost of the transaction. The range of this integer\n  may vary between different Stacks nodes. In order to compute\n  an estimate of total fee amount for the transaction, this\n  value is multiplied by the same Stacks node's estimated fee\n  rate.\n* `cost_scalar_change_by_byte` - a float value that indicates how\n  much the `estimated_cost_scalar` value would increase for every\n  additional byte in the final transaction.\n* `estimations` - an array of estimated fee rates and total fees to\n  pay in microSTX for the transaction. This array provides a range of\n  estimates (default: 3) that may be used. Each element of the array\n  contains the following fields:\n    * `fee_rate` - the estimated value for the current fee\n      rates in the network\n    * `fee` - the estimated value for the total fee in\n      microSTX that the given transaction should pay. These\n      values are the result of computing:\n      `fee_rate` x `estimated_cost_scalar`.\n      If the estimated fees are less than the minimum relay\n      fee `(1 ustx x estimated_len)`, then that minimum relay\n      fee will be returned here instead.\nNote: If the final transaction's byte size is larger than\nsupplied to `estimated_len`, then applications should increase\nthis fee amount by:\n  `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`)\n",type:"text/plain"},url:{path:["v2","fees","transaction"],host:["{{baseUrl}}"],query:[],variable:[]},header:[{key:"Content-Type",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'{\n    "transaction_payload": "<string>",\n    "estimated_len": "<integer>"\n}'}}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/api/get-approximate-fees-for-a-given-transaction",previous:{title:"Fetch fee rate",permalink:"/api/fetch-fee-rate"},next:{title:"Transaction Events",permalink:"/api/transaction-events"}},l=[],c={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-approximate-fees-for-a-given-transaction"},"Get approximate fees for a given transaction"),(0,i.kt)("p",null,"Get an estimated fee for the supplied transaction.  This\nestimates the execution cost of the transaction, the current\nfee rate of the network, and returns estimates for fee\namounts."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transaction_payload")," is a hex-encoded serialization of\nthe TransactionPayload for the transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimated_len")," is an optional argument that provides the\nendpoint with an estimation of the final length (in bytes)\nof the transaction, including any post-conditions and\nsignatures\nIf the node cannot provide an estimate for the transaction\n(e.g., if the node has never seen a contract-call for the\ngiven contract and function) or if estimation is not\nconfigured on this node, a 400 response is returned.\nThe 400 response will be a JSON error containing a ",(0,i.kt)("inlineCode",{parentName:"li"},"reason"),"\nfield which can be one of the following:"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DatabaseError")," - this Stacks node has had an internal\ndatabase error while trying to estimate the costs of the\nsupplied transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NoEstimateAvailable")," - this Stacks node has not seen this\nkind of contract-call before, and it cannot provide an\nestimate yet."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CostEstimationDisabled")," - this Stacks node does not perform\nfee or cost estimation, and it cannot respond on this\nendpoint.\nThe 200 response contains the following data:"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimated_cost")," - the estimated multi-dimensional cost of\nexecuting the Clarity VM on the provided transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimated_cost_scalar")," - a unitless integer that the Stacks\nnode uses to compare how much of the block limit is consumed\nby different transactions. This value incorporates the\nestimated length of the transaction and the estimated\nexecution cost of the transaction. The range of this integer\nmay vary between different Stacks nodes. In order to compute\nan estimate of total fee amount for the transaction, this\nvalue is multiplied by the same Stacks node's estimated fee\nrate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cost_scalar_change_by_byte")," - a float value that indicates how\nmuch the ",(0,i.kt)("inlineCode",{parentName:"li"},"estimated_cost_scalar")," value would increase for every\nadditional byte in the final transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimations")," - an array of estimated fee rates and total fees to\npay in microSTX for the transaction. This array provides a range of\nestimates (default: 3) that may be used. Each element of the array\ncontains the following fields:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"* `fee_rate` - the estimated value for the current fee\n  rates in the network\n* `fee` - the estimated value for the total fee in\n  microSTX that the given transaction should pay. These\n  values are the result of computing:\n  `fee_rate` x `estimated_cost_scalar`.\n  If the estimated fees are less than the minimum relay\n  fee `(1 ustx x estimated_len)`, then that minimum relay\n  fee will be returned here instead.\n")),"Note: If the final transaction's byte size is larger than\nsupplied to ",(0,i.kt)("inlineCode",{parentName:"li"},"estimated_len"),", then applications should increase\nthis fee amount by:\n",(0,i.kt)("inlineCode",{parentName:"li"},"fee_rate")," x ",(0,i.kt)("inlineCode",{parentName:"li"},"cost_scalar_change_by_byte")," x (",(0,i.kt)("inlineCode",{parentName:"li"},"final_size")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"estimated_size"),")")),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Request Body ",(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"transaction_payload"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"estimated_len"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"200")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Estimated fees for the transaction"))),(0,i.kt)("div",null,(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"estimated_cost_scalar"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"cost_scalar_change_by_byte"),(0,i.kt)("span",{style:{opacity:"0.6"}}," number"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"estimated_cost"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object"),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"read_count"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"read_length"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"runtime"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"write_count"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"write_length"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"estimations"),(0,i.kt)("span",{style:{opacity:"0.6"}}," object[]"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"fee_rate"),(0,i.kt)("span",{style:{opacity:"0.6"}}," number"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"fee"),(0,i.kt)("span",{style:{opacity:"0.6"}}," number"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL")))))))))))))))}p.isMDXComponent=!0}}]);