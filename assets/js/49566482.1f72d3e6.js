"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[8507],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>m});var n=a(67294);function i(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){i(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,i=function(t,e){if(null==t)return{};var a,n,i={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(i[a]=t[a]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(i[a]=t[a])}return i}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},c=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},d="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},y=n.forwardRef((function(t,e){var a=t.components,i=t.mdxType,r=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),d=p(a),y=i,m=d["".concat(s,".").concat(y)]||d[y]||u[y]||r;return a?n.createElement(m,o(o({ref:e},c),{},{components:a})):n.createElement(m,o({ref:e},c))}));function m(t,e){var a=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=a.length,o=new Array(r);o[0]=y;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[d]="string"==typeof t?t:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},13358:(t,e,a)=>{a.r(e),a.d(e,{contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={},o="Get specific data-map inside a contract",l={type:"api",id:"get-specific-data-map-inside-a-contract",unversionedId:"get-specific-data-map-inside-a-contract",title:"Get specific data-map inside a contract",description:"",slug:"/get-specific-data-map-inside-a-contract",frontMatter:{},api:{tags:["Smart Contracts"],operationId:"get_contract_data_map_entry",description:"Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].\n\nThe key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\nIn the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n",responses:{200:{description:"Success",content:{"application/json":{schema:{description:"Response of get data map entry request",title:"MapEntryResponse",type:"object",additionalProperties:!1,required:["data"],properties:{data:{type:"string",description:"Hex-encoded string of clarity value. It is always an optional tuple."},proof:{type:"string",description:"Hex-encoded string of the MARF proof for the data"}}},example:{data:"0x0a0c000000010a6d6f6e737465722d69640100000000000000000000000000000001",proof:"0x123..."}}}},400:{description:"Failed loading data map"}},parameters:[{name:"contract_address",in:"path",required:!0,description:"Stacks address",schema:{type:"string"},example:"SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11"},{name:"contract_name",in:"path",required:!0,description:"Contract name",schema:{type:"string"},example:"newyorkcitycoin-core-v2"},{name:"map_name",in:"path",required:!0,description:"Map name",schema:{type:"string"},example:"approved-contracts"},{name:"proof",in:"query",description:"Returns object without the proof field when set to 0",schema:{type:"integer"}},{name:"tip",in:"query",schema:{type:"string"},description:"The Stacks chain tip to query from"}],"x-codegen-request-body-name":"key",requestBody:{description:"Hex string serialization of the lookup key (which should be a Clarity value)",required:!0,content:{"application/json":{schema:{type:"string"},example:"0x0100000000000000000000000000000095"}}},method:"post",path:"/v2/map_entry/{contract_address}/{contract_name}/{map_name}",servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],jsonRequestBodyExample:"string",info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://docs.hiro.so/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get specific data-map inside a contract",description:{content:"Attempt to fetch data from a contract data map. The contract is identified with Stacks Address `contract_address` and Contract Name `contract_address` in the URL path. The map is identified with [Map Name].\n\nThe key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\nIn the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n",type:"text/plain"},url:{path:["v2","map_entry",":contract_address",":contract_name",":map_name"],host:["{{baseUrl}}"],query:[{description:{content:"Returns object without the proof field when set to 0",type:"text/plain"},key:"proof",value:"<integer>"},{description:{content:"The Stacks chain tip to query from",type:"text/plain"},key:"tip",value:"<string>"}],variable:[{description:{content:"(Required) Stacks address",type:"text/plain"},type:"any",value:"<string>",key:"contract_address"},{description:{content:"(Required) Contract name",type:"text/plain"},type:"any",value:"<string>",key:"contract_name"},{description:{content:"(Required) Map name",type:"text/plain"},type:"any",value:"<string>",key:"map_name"}]},header:[{key:"Content-Type",value:"application/json"}],method:"POST",body:{mode:"raw",raw:'"<string>"'}}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/api/get-specific-data-map-inside-a-contract",previous:{title:"Get contract interface",permalink:"/api/get-contract-interface"},next:{title:"Get contract source",permalink:"/api/get-contract-source"}},s=[],p={toc:s},c="wrapper";function d(t){let{components:e,...a}=t;return(0,i.kt)(c,(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"get-specific-data-map-inside-a-contract"},"Get specific data-map inside a contract"),(0,i.kt)("p",null,"Attempt to fetch data from a contract data map. The contract is identified with Stacks Address ",(0,i.kt)("inlineCode",{parentName:"p"},"contract_address")," and Contract Name ",(0,i.kt)("inlineCode",{parentName:"p"},"contract_address")," in the URL path. The map is identified with ","[Map Name]","."),(0,i.kt)("p",null,"The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom."),(0,i.kt)("p",null,"In the response, ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object."),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Path Parameters"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"contract_address"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Stacks address")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: SPSCWDV3RKV5ZRN1FQD84YE1NQFEDJ9R1F4DYQ11"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"contract_name"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Contract name")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: newyorkcitycoin-core-v2"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"map_name"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Map name")),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: approved-contracts"))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Query Parameters"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"proof"),(0,i.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Returns object without the proof field when set to 0")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"tip"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"The Stacks chain tip to query from")))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Request Body ",(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,i.kt)("div",null,(0,i.kt)("p",null,"Hex string serialization of the lookup key (which should be a Clarity value)"))))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("span",{style:{opacity:"0.6"}}," string"))))),(0,i.kt)("table",{style:{display:"table",width:"100%"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"200")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Success"))),(0,i.kt)("div",null,(0,i.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,i.kt)("div",null)))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"data"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Hex-encoded string of clarity value. It is always an optional tuple.")))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"proof"),(0,i.kt)("span",{style:{opacity:"0.6"}}," string"),(0,i.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,i.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,i.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,i.kt)("p",null,"Hex-encoded string of the MARF proof for the data"))))))))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("div",{style:{display:"flex"}},(0,i.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,i.kt)("code",null,"400")),(0,i.kt)("div",null,(0,i.kt)("p",null,"Failed loading data map"))),(0,i.kt)("div",null))))))}d.isMDXComponent=!0}}]);