"use strict";(self.webpackChunk_CapybaraIO_docs=self.webpackChunk_CapybaraIO_docs||[]).push([[6315],{3905:(t,e,i)=>{i.d(e,{Zo:()=>d,kt:()=>u});var n=i(67294);function r(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function s(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){r(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function a(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}var c=n.createContext({}),p=function(t){var e=n.useContext(c),i=e;return t&&(i="function"==typeof t?t(e):s(s({},e),t)),i},d=function(t){var e=p(t.components);return n.createElement(c.Provider,{value:e},t.children)},l="mdxType",_={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},y=n.forwardRef((function(t,e){var i=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,d=a(t,["components","mdxType","originalType","parentName"]),l=p(i),y=r,u=l["".concat(c,".").concat(y)]||l[y]||_[y]||o;return i?n.createElement(u,s(s({ref:e},d),{},{components:i})):n.createElement(u,s({ref:e},d))}));function u(t,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=i.length,s=new Array(o);s[0]=y;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=t,a[l]="string"==typeof t?t:r,s[1]=a;for(var p=2;p<o;p++)s[p]=i[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,i)}y.displayName="MDXCreateElement"},9668:(t,e,i)=>{i.r(e),i.d(e,{contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var n=i(87462),r=(i(67294),i(3905));const o={},s="Get account transactions",a={type:"api",id:"get-account-transactions",unversionedId:"get-account-transactions",title:"Get account transactions",description:"",slug:"/get-account-transactions",frontMatter:{},api:{description:"Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).\n\nIf you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n",tags:["Accounts"],operationId:"get_account_transactions",parameters:[{name:"principal",in:"path",description:"Stacks address or a Contract identifier",required:!0,schema:{type:"string"},example:"SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0"},{name:"limit",in:"query",description:"max number of account transactions to fetch",required:!1,schema:{type:"integer"},example:42e3},{name:"offset",in:"query",description:"index of first account transaction to fetch",required:!1,schema:{type:"integer"},example:42e3},{name:"height",in:"query",description:"Filter for transactions only at this given block height",required:!1,schema:{type:"number"},example:42e3},{name:"unanchored",in:"query",description:"Include transaction data from unanchored (i.e. unconfirmed) microblocks",required:!1,schema:{type:"boolean",default:!1},example:!0},{name:"until_block",in:"query",description:"returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.",required:!1,schema:{type:"string"},example:6e4}],responses:{200:{description:"Success",content:{"application/json":{schema:{description:"GET request that returns account transactions",title:"AddressTransactionsListResponse",type:"object",additionalProperties:!1,required:["results","limit","offset","total"],properties:{limit:{type:"integer",maximum:30},offset:{type:"integer"},total:{type:"integer"},results:{type:"array",items:{type:"object",anyOf:[{type:"object",title:"MempoolTransaction",description:"Describes all transaction types on Stacks 2.0 blockchain",anyOf:[{title:"MempoolTokenTransferTransaction",description:"Describes representation of a Type-0 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-0-transferring-an-asset",type:"object",required:["tx_type","token_transfer","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["token_transfer"]},token_transfer:{type:"object",required:["recipient_address","amount","memo"],additionalProperties:!1,properties:{recipient_address:{type:"string"},amount:{type:"string",description:"Transfer amount as Integer string (64-bit unsigned integer)"},memo:{type:"string",description:"Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string)"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolSmartContractTransaction",description:"Describes representation of a Type-1 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-1-instantiating-a-smart-contract",required:["tx_type","smart_contract","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["smart_contract"]},smart_contract:{type:"object",additionalProperties:!1,required:["contract_id","source_code"],properties:{clarity_version:{type:"number",description:"The Clarity version of the contract, only specified for versioned contract transactions, otherwise null",nullable:!0},contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},source_code:{type:"string",description:"Clarity code of the smart contract being deployed"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolContractCallTransaction",description:"Describes representation of a Type 2 Stacks 2.0 transaction: Contract Call",required:["tx_type","contract_call","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["contract_call"]},contract_call:{type:"object",additionalProperties:!1,required:["contract_id","function_name","function_signature"],properties:{contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},function_name:{type:"string",description:"Name of the Clarity function to be invoked"},function_signature:{type:"string",description:"Function definition, including function name and type as well as parameter names and types"},function_args:{type:"array",description:"List of arguments used to invoke the function",items:{type:"object",additionalProperties:!1,required:["hex","repr","name","type"],properties:{hex:{type:"string"},repr:{type:"string"},name:{type:"string"},type:{type:"string"}}}}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolPoisonMicroblockTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","poison_microblock","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["poison_microblock"]},poison_microblock:{type:"object",required:["microblock_header_1","microblock_header_2"],additionalProperties:!1,properties:{microblock_header_1:{type:"string",description:"Hex encoded microblock header"},microblock_header_2:{type:"string",description:"Hex encoded microblock header"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}},{type:"object",title:"MempoolCoinbaseTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","coinbase_payload","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_status","receipt_time","receipt_time_iso"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["coinbase"]},coinbase_payload:{type:"object",additionalProperties:!1,required:["data"],properties:{data:{type:"string",description:"Hex encoded 32-byte scratch space for block leader's use"},alt_recipient:{type:"string",nullable:!0,description:"A principal that will receive the miner rewards for this coinbase transaction. Can be either a standard principal or contract principal. Only specified for `coinbase-to-alt-recipient` transaction types, otherwise null."}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},tx_status:{title:"MempoolTransactionStatus",description:"Status of the transaction",type:"string",enum:["pending","dropped_replace_by_fee","dropped_replace_across_fork","dropped_too_expensive","dropped_stale_garbage_collect"]},receipt_time:{type:"number",description:"A unix timestamp (in seconds) indicating when the transaction broadcast was received by the node."},receipt_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when the transaction broadcast was received by the node."}}}]},{type:"object",title:"Transaction",description:"Describes all transaction types on Stacks 2.0 blockchain",anyOf:[{title:"TokenTransferTransaction",description:"Describes representation of a Type-0 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-0-transferring-an-asset",type:"object",required:["tx_type","token_transfer","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_index","block_hash","block_height","burn_block_time","burn_block_time_iso","parent_burn_block_time","parent_burn_block_time_iso","canonical","tx_status","tx_result","events","event_count","parent_block_hash","is_unanchored","microblock_hash","microblock_sequence","microblock_canonical","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["token_transfer"]},token_transfer:{type:"object",required:["recipient_address","amount","memo"],additionalProperties:!1,properties:{recipient_address:{type:"string"},amount:{type:"string",description:"Transfer amount as Integer string (64-bit unsigned integer)"},memo:{type:"string",description:"Hex encoded arbitrary message, up to 34 bytes length (should try decoding to an ASCII string)"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},block_hash:{type:"string",description:"Hash of the blocked this transactions was associated with"},block_height:{type:"integer",description:"Height of the block this transactions was associated with"},burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this block was mined"},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined."},parent_burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this parent block was mined"},parent_burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined."},canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},tx_index:{type:"integer",description:"Index of the transaction, indicating the order. Starts at `0` and increases with each transaction"},tx_status:{title:"TransactionStatus",description:"Status of the transaction",type:"string",enum:["success","abort_by_response","abort_by_post_condition"]},tx_result:{type:"object",required:["hex","repr"],description:"Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction.",additionalProperties:!1,properties:{hex:{type:"string",description:"Hex string representing the value fo the transaction result"},repr:{type:"string",description:"Readable string of the transaction result"}}},event_count:{type:"integer",description:"Number of transaction events"},parent_block_hash:{type:"string",description:"Hash of the previous block."},is_unanchored:{type:"boolean",description:"True if the transaction is included in a microblock that has not been confirmed by an anchor block."},microblock_hash:{type:"string",description:"The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string."},microblock_sequence:{type:"integer",description:"The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index)."},microblock_canonical:{type:"boolean",description:"Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork."},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},events:{type:"array",description:"List of transaction events",items:{type:"object",title:"TransactionEvent",anyOf:[{type:"object",title:"TransactionEventSmartContractLog",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","contract_log"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["smart_contract_log"]},tx_id:{type:"string"},contract_log:{type:"object",additionalProperties:!1,required:["contract_id","topic","value"],properties:{contract_id:{type:"string"},topic:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}},{type:"object",title:"TransactionEventStxLock",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","stx_lock_event"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_lock"]},tx_id:{type:"string"},stx_lock_event:{type:"object",additionalProperties:!1,required:["locked_amount","unlock_height","locked_address"],properties:{locked_amount:{type:"string"},unlock_height:{type:"integer"},locked_address:{type:"string"}}}}},{type:"object",title:"TransactionEventStxAsset",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_asset"]},tx_id:{type:"string"},asset:{type:"object",title:"TransactionEventAsset",additionalProperties:!1,properties:{asset_event_type:{title:"TransactionEventAssetType",type:"string",enum:["transfer","mint","burn"]},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"},value:{type:"string"},memo:{type:"string"}}}}},{type:"object",title:"TransactionEventFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","amount"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"}}}}},{type:"object",title:"TransactionEventNonFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["non_fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","value"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}}]}}}},{type:"object",title:"SmartContractTransaction",description:"Describes representation of a Type-1 Stacks 2.0 transaction. https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#type-1-instantiating-a-smart-contract",required:["tx_type","smart_contract","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_index","block_hash","block_height","burn_block_time","burn_block_time_iso","parent_burn_block_time","parent_burn_block_time_iso","canonical","tx_status","tx_result","events","event_count","parent_block_hash","is_unanchored","microblock_hash","microblock_sequence","microblock_canonical","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["smart_contract"]},smart_contract:{type:"object",additionalProperties:!1,required:["contract_id","source_code"],properties:{clarity_version:{type:"number",description:"The Clarity version of the contract, only specified for versioned contract transactions, otherwise null",nullable:!0},contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},source_code:{type:"string",description:"Clarity code of the smart contract being deployed"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},block_hash:{type:"string",description:"Hash of the blocked this transactions was associated with"},block_height:{type:"integer",description:"Height of the block this transactions was associated with"},burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this block was mined"},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined."},parent_burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this parent block was mined"},parent_burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined."},canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},tx_index:{type:"integer",description:"Index of the transaction, indicating the order. Starts at `0` and increases with each transaction"},tx_status:{title:"TransactionStatus",description:"Status of the transaction",type:"string",enum:["success","abort_by_response","abort_by_post_condition"]},tx_result:{type:"object",required:["hex","repr"],description:"Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction.",additionalProperties:!1,properties:{hex:{type:"string",description:"Hex string representing the value fo the transaction result"},repr:{type:"string",description:"Readable string of the transaction result"}}},event_count:{type:"integer",description:"Number of transaction events"},parent_block_hash:{type:"string",description:"Hash of the previous block."},is_unanchored:{type:"boolean",description:"True if the transaction is included in a microblock that has not been confirmed by an anchor block."},microblock_hash:{type:"string",description:"The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string."},microblock_sequence:{type:"integer",description:"The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index)."},microblock_canonical:{type:"boolean",description:"Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork."},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},events:{type:"array",description:"List of transaction events",items:{type:"object",title:"TransactionEvent",anyOf:[{type:"object",title:"TransactionEventSmartContractLog",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","contract_log"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["smart_contract_log"]},tx_id:{type:"string"},contract_log:{type:"object",additionalProperties:!1,required:["contract_id","topic","value"],properties:{contract_id:{type:"string"},topic:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}},{type:"object",title:"TransactionEventStxLock",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","stx_lock_event"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_lock"]},tx_id:{type:"string"},stx_lock_event:{type:"object",additionalProperties:!1,required:["locked_amount","unlock_height","locked_address"],properties:{locked_amount:{type:"string"},unlock_height:{type:"integer"},locked_address:{type:"string"}}}}},{type:"object",title:"TransactionEventStxAsset",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_asset"]},tx_id:{type:"string"},asset:{type:"object",title:"TransactionEventAsset",additionalProperties:!1,properties:{asset_event_type:{title:"TransactionEventAssetType",type:"string",enum:["transfer","mint","burn"]},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"},value:{type:"string"},memo:{type:"string"}}}}},{type:"object",title:"TransactionEventFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","amount"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"}}}}},{type:"object",title:"TransactionEventNonFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["non_fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","value"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}}]}}}},{type:"object",title:"ContractCallTransaction",description:"Describes representation of a Type 2 Stacks 2.0 transaction: Contract Call",required:["tx_type","contract_call","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_index","block_hash","block_height","burn_block_time","burn_block_time_iso","parent_burn_block_time","parent_burn_block_time_iso","canonical","tx_status","tx_result","events","event_count","parent_block_hash","is_unanchored","microblock_hash","microblock_sequence","microblock_canonical","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["contract_call"]},contract_call:{type:"object",additionalProperties:!1,required:["contract_id","function_name","function_signature"],properties:{contract_id:{type:"string",description:"Contract identifier formatted as `<principaladdress>.<contract_name>`"},function_name:{type:"string",description:"Name of the Clarity function to be invoked"},function_signature:{type:"string",description:"Function definition, including function name and type as well as parameter names and types"},function_args:{type:"array",description:"List of arguments used to invoke the function",items:{type:"object",additionalProperties:!1,required:["hex","repr","name","type"],properties:{hex:{type:"string"},repr:{type:"string"},name:{type:"string"},type:{type:"string"}}}}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},block_hash:{type:"string",description:"Hash of the blocked this transactions was associated with"},block_height:{type:"integer",description:"Height of the block this transactions was associated with"},burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this block was mined"},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined."},parent_burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this parent block was mined"},parent_burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined."},canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},tx_index:{type:"integer",description:"Index of the transaction, indicating the order. Starts at `0` and increases with each transaction"},tx_status:{title:"TransactionStatus",description:"Status of the transaction",type:"string",enum:["success","abort_by_response","abort_by_post_condition"]},tx_result:{type:"object",required:["hex","repr"],description:"Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction.",additionalProperties:!1,properties:{hex:{type:"string",description:"Hex string representing the value fo the transaction result"},repr:{type:"string",description:"Readable string of the transaction result"}}},event_count:{type:"integer",description:"Number of transaction events"},parent_block_hash:{type:"string",description:"Hash of the previous block."},is_unanchored:{type:"boolean",description:"True if the transaction is included in a microblock that has not been confirmed by an anchor block."},microblock_hash:{type:"string",description:"The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string."},microblock_sequence:{type:"integer",description:"The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index)."},microblock_canonical:{type:"boolean",description:"Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork."},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},events:{type:"array",description:"List of transaction events",items:{type:"object",title:"TransactionEvent",anyOf:[{type:"object",title:"TransactionEventSmartContractLog",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","contract_log"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["smart_contract_log"]},tx_id:{type:"string"},contract_log:{type:"object",additionalProperties:!1,required:["contract_id","topic","value"],properties:{contract_id:{type:"string"},topic:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}},{type:"object",title:"TransactionEventStxLock",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","stx_lock_event"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_lock"]},tx_id:{type:"string"},stx_lock_event:{type:"object",additionalProperties:!1,required:["locked_amount","unlock_height","locked_address"],properties:{locked_amount:{type:"string"},unlock_height:{type:"integer"},locked_address:{type:"string"}}}}},{type:"object",title:"TransactionEventStxAsset",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_asset"]},tx_id:{type:"string"},asset:{type:"object",title:"TransactionEventAsset",additionalProperties:!1,properties:{asset_event_type:{title:"TransactionEventAssetType",type:"string",enum:["transfer","mint","burn"]},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"},value:{type:"string"},memo:{type:"string"}}}}},{type:"object",title:"TransactionEventFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","amount"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"}}}}},{type:"object",title:"TransactionEventNonFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["non_fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","value"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}}]}}}},{type:"object",title:"PoisonMicroblockTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","poison_microblock","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_index","block_hash","block_height","burn_block_time","burn_block_time_iso","parent_burn_block_time","parent_burn_block_time_iso","canonical","tx_status","tx_result","events","event_count","parent_block_hash","is_unanchored","microblock_hash","microblock_sequence","microblock_canonical","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["poison_microblock"]},poison_microblock:{type:"object",required:["microblock_header_1","microblock_header_2"],additionalProperties:!1,properties:{microblock_header_1:{type:"string",description:"Hex encoded microblock header"},microblock_header_2:{type:"string",description:"Hex encoded microblock header"}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},block_hash:{type:"string",description:"Hash of the blocked this transactions was associated with"},block_height:{type:"integer",description:"Height of the block this transactions was associated with"},burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this block was mined"},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined."},parent_burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this parent block was mined"},parent_burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined."},canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},tx_index:{type:"integer",description:"Index of the transaction, indicating the order. Starts at `0` and increases with each transaction"},tx_status:{title:"TransactionStatus",description:"Status of the transaction",type:"string",enum:["success","abort_by_response","abort_by_post_condition"]},tx_result:{type:"object",required:["hex","repr"],description:"Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction.",additionalProperties:!1,properties:{hex:{type:"string",description:"Hex string representing the value fo the transaction result"},repr:{type:"string",description:"Readable string of the transaction result"}}},event_count:{type:"integer",description:"Number of transaction events"},parent_block_hash:{type:"string",description:"Hash of the previous block."},is_unanchored:{type:"boolean",description:"True if the transaction is included in a microblock that has not been confirmed by an anchor block."},microblock_hash:{type:"string",description:"The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string."},microblock_sequence:{type:"integer",description:"The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index)."},microblock_canonical:{type:"boolean",description:"Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork."},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},events:{type:"array",description:"List of transaction events",items:{type:"object",title:"TransactionEvent",anyOf:[{type:"object",title:"TransactionEventSmartContractLog",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","contract_log"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["smart_contract_log"]},tx_id:{type:"string"},contract_log:{type:"object",additionalProperties:!1,required:["contract_id","topic","value"],properties:{contract_id:{type:"string"},topic:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}},{type:"object",title:"TransactionEventStxLock",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","stx_lock_event"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_lock"]},tx_id:{type:"string"},stx_lock_event:{type:"object",additionalProperties:!1,required:["locked_amount","unlock_height","locked_address"],properties:{locked_amount:{type:"string"},unlock_height:{type:"integer"},locked_address:{type:"string"}}}}},{type:"object",title:"TransactionEventStxAsset",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_asset"]},tx_id:{type:"string"},asset:{type:"object",title:"TransactionEventAsset",additionalProperties:!1,properties:{asset_event_type:{title:"TransactionEventAssetType",type:"string",enum:["transfer","mint","burn"]},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"},value:{type:"string"},memo:{type:"string"}}}}},{type:"object",title:"TransactionEventFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","amount"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"}}}}},{type:"object",title:"TransactionEventNonFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["non_fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","value"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}}]}}}},{type:"object",title:"CoinbaseTransaction",description:"Describes representation of a Type 3 Stacks 2.0 transaction: Poison Microblock",required:["tx_type","coinbase_payload","fee_rate","sender_address","sponsored","post_condition_mode","post_conditions","anchor_mode","tx_index","block_hash","block_height","burn_block_time","burn_block_time_iso","parent_burn_block_time","parent_burn_block_time_iso","canonical","tx_status","tx_result","events","event_count","parent_block_hash","is_unanchored","microblock_hash","microblock_sequence","microblock_canonical","execution_cost_read_count","execution_cost_read_length","execution_cost_runtime","execution_cost_write_count","execution_cost_write_length"],additionalProperties:!1,properties:{tx_type:{type:"string",enum:["coinbase"]},coinbase_payload:{type:"object",additionalProperties:!1,required:["data"],properties:{data:{type:"string",description:"Hex encoded 32-byte scratch space for block leader's use"},alt_recipient:{type:"string",nullable:!0,description:"A principal that will receive the miner rewards for this coinbase transaction. Can be either a standard principal or contract principal. Only specified for `coinbase-to-alt-recipient` transaction types, otherwise null."}}},tx_id:{type:"string",description:"Transaction ID"},nonce:{type:"integer",description:"Used for ordering the transactions originating from and paying from an account. The nonce ensures that a transaction is processed at most once. The nonce counts the number of times an account's owner(s) have authorized a transaction. The first transaction from an account will have a nonce value equal to 0, the second will have a nonce value equal to 1, and so on."},fee_rate:{type:"string",description:"Transaction fee as Integer string (64-bit unsigned integer)."},sender_address:{type:"string",description:"Address of the transaction initiator"},sponsor_nonce:{type:"integer"},sponsored:{type:"boolean",description:"Denotes whether the originating account is the same as the paying account"},sponsor_address:{type:"string"},post_condition_mode:{title:"PostConditionMode",description:"",type:"string",enum:["allow","deny"]},post_conditions:{type:"array",items:{title:"PostCondition",description:"Post-conditionscan limit the damage done to a user's assets",anyOf:[{title:"PostConditionStx",type:"object",required:["principal","condition_code","amount","type"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},amount:{type:"string"},type:{enum:["stx"],type:"string"}}},{title:"PostConditionFungible",type:"object",required:["principal","condition_code","amount","type","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionFungibleConditionCode",description:"A fungible condition code encodes a statement being made for either STX or a fungible token, with respect to the originating account.",type:"string",enum:["sent_equal_to","sent_greater_than","sent_greater_than_or_equal_to","sent_less_than","sent_less_than_or_equal_to"]},type:{enum:["fungible"],type:"string"},amount:{type:"string"},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}},{title:"PostConditionNonFungible",type:"object",required:["principal","condition_code","type","asset_value","asset"],additionalProperties:!1,properties:{principal:{title:"PostConditionPrincipal",type:"object",anyOf:[{type:"object",additionalProperties:!1,description:"Principal Origin",required:["type_id"],properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_origin"]}}},{type:"object",description:"Principal Standard",required:["type_id","address"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_standard"]},address:{type:"string"}}},{type:"object",description:"Principal Contract",required:["type_id","address","contract_name"],additionalProperties:!1,properties:{type_id:{type:"string",description:"String literal of type `PostConditionPrincipalType`",enum:["principal_contract"]},address:{type:"string"},contract_name:{type:"string"}}}]},condition_code:{title:"PostConditionNonFungibleConditionCode",description:"A non-fungible condition code encodes a statement being made about a non-fungible token, with respect to whether or not the particular non-fungible token is owned by the account.",type:"string",enum:["sent","not_sent"]},type:{enum:["non_fungible"],type:"string"},asset_value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}},asset:{type:"object",required:["asset_name","contract_address","contract_name"],additionalProperties:!1,properties:{asset_name:{type:"string"},contract_address:{type:"string"},contract_name:{type:"string"}}}}}]}},anchor_mode:{title:"TransactionAnchorModeType",type:"string",enum:["on_chain_only","off_chain_only","any"],description:"`on_chain_only`: the transaction MUST be included in an anchored block, `off_chain_only`: the transaction MUST be included in a microblock, `any`: the leader can choose where to include the transaction."},block_hash:{type:"string",description:"Hash of the blocked this transactions was associated with"},block_height:{type:"integer",description:"Height of the block this transactions was associated with"},burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this block was mined"},burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this block was mined."},parent_burn_block_time:{type:"integer",description:"Unix timestamp (in seconds) indicating when this parent block was mined"},parent_burn_block_time_iso:{type:"string",description:"An ISO 8601 (YYYY-MM-DDTHH:mm:ss.sssZ) timestamp indicating when this parent block was mined."},canonical:{type:"boolean",description:"Set to `true` if block corresponds to the canonical chain tip"},tx_index:{type:"integer",description:"Index of the transaction, indicating the order. Starts at `0` and increases with each transaction"},tx_status:{title:"TransactionStatus",description:"Status of the transaction",type:"string",enum:["success","abort_by_response","abort_by_post_condition"]},tx_result:{type:"object",required:["hex","repr"],description:"Result of the transaction. For contract calls, this will show the value returned by the call. For other transaction types, this will return a boolean indicating the success of the transaction.",additionalProperties:!1,properties:{hex:{type:"string",description:"Hex string representing the value fo the transaction result"},repr:{type:"string",description:"Readable string of the transaction result"}}},event_count:{type:"integer",description:"Number of transaction events"},parent_block_hash:{type:"string",description:"Hash of the previous block."},is_unanchored:{type:"boolean",description:"True if the transaction is included in a microblock that has not been confirmed by an anchor block."},microblock_hash:{type:"string",description:"The microblock hash that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be an empty string."},microblock_sequence:{type:"integer",description:"The microblock sequence number that this transaction was streamed in. If the transaction was batched in an anchor block (not included within a microblock) then this value will be 2147483647 (0x7fffffff, the max int32 value), this value preserves logical transaction ordering on (block_height, microblock_sequence, tx_index)."},microblock_canonical:{type:"boolean",description:"Set to `true` if microblock is anchored in the canonical chain tip, `false` if the transaction was orphaned in a micro-fork."},execution_cost_read_count:{type:"integer",description:"Execution cost read count."},execution_cost_read_length:{type:"integer",description:"Execution cost read length."},execution_cost_runtime:{type:"integer",description:"Execution cost runtime."},execution_cost_write_count:{type:"integer",description:"Execution cost write count."},execution_cost_write_length:{type:"integer",description:"Execution cost write length."},events:{type:"array",description:"List of transaction events",items:{type:"object",title:"TransactionEvent",anyOf:[{type:"object",title:"TransactionEventSmartContractLog",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","contract_log"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["smart_contract_log"]},tx_id:{type:"string"},contract_log:{type:"object",additionalProperties:!1,required:["contract_id","topic","value"],properties:{contract_id:{type:"string"},topic:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}},{type:"object",title:"TransactionEventStxLock",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","stx_lock_event"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_lock"]},tx_id:{type:"string"},stx_lock_event:{type:"object",additionalProperties:!1,required:["locked_amount","unlock_height","locked_address"],properties:{locked_amount:{type:"string"},unlock_height:{type:"integer"},locked_address:{type:"string"}}}}},{type:"object",title:"TransactionEventStxAsset",description:"Only present in `smart_contract` and `contract_call` tx types.",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["stx_asset"]},tx_id:{type:"string"},asset:{type:"object",title:"TransactionEventAsset",additionalProperties:!1,properties:{asset_event_type:{title:"TransactionEventAssetType",type:"string",enum:["transfer","mint","burn"]},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"},value:{type:"string"},memo:{type:"string"}}}}},{type:"object",title:"TransactionEventFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","amount"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},amount:{type:"string"}}}}},{type:"object",title:"TransactionEventNonFungibleAsset",required:["event_index","event_type","tx_id","asset"],additionalProperties:!1,properties:{event_index:{type:"integer"},event_type:{type:"string",enum:["non_fungible_token_asset"]},tx_id:{type:"string"},asset:{type:"object",additionalProperties:!1,required:["asset_event_type","asset_id","sender","recipient","value"],properties:{asset_event_type:{type:"string"},asset_id:{type:"string"},sender:{type:"string"},recipient:{type:"string"},value:{type:"object",additionalProperties:!1,required:["hex","repr"],properties:{hex:{type:"string"},repr:{type:"string"}}}}}}}]}}}}]}]}}}},example:{limit:20,offset:0,total:4989,results:[{tx_id:"0xb16077b94222bc1466396d30df13db460864e85ce929a20aae0a2ac80b31e4e2",tx_status:"success",tx_type:"coinbase",fee_rate:"0",sender_address:"ST2TJRHDHMYBQ417HFB0BDX430TQA5PXRX6495G1V",sponsored:!1,post_condition_mode:"deny",block_hash:"0x83f84f814c1b00ddb672d93b97d06c8326f76746d90a979c12b69e54beb73f69",block_height:5603,burn_block_time:1594335838,canonical:!0,is_unanchored:!1,microblock_hash:"0x590a1bb1d7bcbeafce0a9fc8f8a69e369486192d14687fe95fbe4dc1c71d49df",microblock_sequence:5,microblock_canonical:!0,tx_index:0,coinbase_payload:{data:"0x0000000000000000000000000000000000000000000000000000000000000000"}}]}}}}},method:"get",path:"/extended/v1/address/{principal}/transactions",servers:[{url:"https://api.mainnet.hiro.so/",description:"Mainnet"},{url:"https://api.testnet.hiro.so/",description:"Testnet"},{url:"http://localhost:3999/",description:"Local"}],info:{title:"Stacks Blockchain API",version:"v7.3.0",description:'Welcome to the API reference overview for the <a href="https://capybaraio.github.io/doc/get-started/stacks-blockchain-api">Stacks Blockchain API</a>.\n\n<a href="https://hirosystems.github.io/stacks-blockchain-api/collection.json" download="stacks-api-collection.json">Download Postman collection</a>\n'},postman:{name:"Get account transactions",description:{content:"Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found [here](https://docs.stacks.co/understand-stacks/transactions#types).\n\nIf you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to [WebSockets or Socket.io](https://github.com/hirosystems/stacks-blockchain-api/tree/master/client) for real-time updates.\n",type:"text/plain"},url:{path:["extended","v1","address",":principal","transactions"],host:["{{baseUrl}}"],query:[{description:{content:"max number of account transactions to fetch",type:"text/plain"},key:"limit",value:"<integer>"},{description:{content:"index of first account transaction to fetch",type:"text/plain"},key:"offset",value:"<integer>"},{description:{content:"Filter for transactions only at this given block height",type:"text/plain"},key:"height",value:"<number>"},{description:{content:"Include transaction data from unanchored (i.e. unconfirmed) microblocks",type:"text/plain"},key:"unanchored",value:"false"},{description:{content:"returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.",type:"text/plain"},key:"until_block",value:"<string>"}],variable:[{description:{content:"(Required) Stacks address or a Contract identifier",type:"text/plain"},type:"any",value:"<string>",key:"principal"}]},method:"GET"}},source:"@site/openapi/stacks-blockchain-api.json",sourceDirName:".",permalink:"/doc/api/get-account-transactions",previous:{title:"Get account STX balance",permalink:"/doc/api/get-account-stx-balance"},next:{title:"Get account transaction information for specific transaction",permalink:"/doc/api/get-account-transaction-information-for-specific-transaction"}},c=[],p={toc:c},d="wrapper";function l(t){let{components:e,...i}=t;return(0,r.kt)(d,(0,n.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"get-account-transactions"},"Get account transactions"),(0,r.kt)("p",null,"Retrieves a list of all Transactions for a given Address or Contract Identifier. More information on Transaction types can be found ",(0,r.kt)("a",{parentName:"p",href:"https://docs.stacks.co/understand-stacks/transactions#types"},"here"),"."),(0,r.kt)("p",null,"If you need to actively monitor new transactions for an address or contract id, we highly recommend subscribing to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api/tree/master/client"},"WebSockets or Socket.io")," for real-time updates."),(0,r.kt)("table",{style:{display:"table",width:"100%"}},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{style:{textAlign:"left"}},"Path Parameters"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"principal"),(0,r.kt)("span",{style:{opacity:"0.6"}}," string"),(0,r.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,r.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-required)"}}," REQUIRED"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"Stacks address or a Contract identifier")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0"))))),(0,r.kt)("table",{style:{display:"table",width:"100%"}},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{style:{textAlign:"left"}},"Query Parameters"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"limit"),(0,r.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"max number of account transactions to fetch")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 42000"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"offset"),(0,r.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"index of first account transaction to fetch")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 42000"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"height"),(0,r.kt)("span",{style:{opacity:"0.6"}}," number"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"Filter for transactions only at this given block height")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 42000"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"unanchored"),(0,r.kt)("span",{style:{opacity:"0.6"}}," boolean"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"Include transaction data from unanchored (i.e. unconfirmed) microblocks")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: true"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"until_block"),(0,r.kt)("span",{style:{opacity:"0.6"}}," string"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,"returned data representing the state up until that point in time, rather than the current block. Note - Use either of the query parameters but not both at a time.")),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},"Example: 60000"))))),(0,r.kt)("table",{style:{display:"table",width:"100%"}},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{style:{textAlign:"left"}},"Responses"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("div",{style:{display:"flex"}},(0,r.kt)("div",{style:{marginRight:"var(--ifm-table-cell-padding)"}},(0,r.kt)("code",null,"200")),(0,r.kt)("div",null,(0,r.kt)("p",null,"Success"))),(0,r.kt)("div",null,(0,r.kt)("table",{style:{display:"table",width:"100%",marginTop:"var(--ifm-table-cell-padding)",marginBottom:"0px"}},(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",{style:{textAlign:"left"}},"Schema ",(0,r.kt)("span",{style:{opacity:"0.6"}}," \u2014 "),(0,r.kt)("strong",{style:{fontSize:"var(--ifm-code-font-size)",color:"var(--openapi-optional)"}}," OPTIONAL"),(0,r.kt)("div",null)))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"limit"),(0,r.kt)("span",{style:{opacity:"0.6"}}," integer"),(0,r.kt)("div",{style:{marginTop:"var(--ifm-table-cell-padding)"}},(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Possible values:")," value \u2264 30")))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"offset"),(0,r.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"total"),(0,r.kt)("span",{style:{opacity:"0.6"}}," integer"))),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("code",null,"results"),(0,r.kt)("span",{style:{opacity:"0.6"}}," object[]")))))))))))}l.isMDXComponent=!0}}]);