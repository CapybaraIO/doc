"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[9723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=l(n),h=s,u=d["".concat(c,".").concat(h)]||d[h]||m[h]||o;return n?a.createElement(u,i(i({ref:t},p),{},{components:n})):a.createElement(u,i({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r[d]="string"==typeof e?e:s,i[1]=r;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},49379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var a=n(87462),s=(n(67294),n(3905)),o=n(6365);const i={id:"heystack",title:"Heystack chat app"},r=void 0,c={unversionedId:"example-apps/heystack",id:"example-apps/heystack",title:"Heystack chat app",description:"Introduction",source:"@site/docs/example-apps/heystack.md",sourceDirName:"example-apps",slug:"/example-apps/heystack",permalink:"/doc/example-apps/heystack",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/example-apps/heystack.md",tags:[],version:"current",frontMatter:{id:"heystack",title:"Heystack chat app"},sidebar:"example-apps",previous:{title:"Billboard app",permalink:"/doc/example-apps/billboard"},next:{title:"Angular authenticator",permalink:"/doc/example-apps/angular"}},l={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Heystack overview",id:"heystack-overview",level:2},{value:"Review smart contracts",id:"review-smart-contracts",level:2},{value:"Content contract",id:"content-contract",level:3},{value:"Token contract",id:"token-contract",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Token faucet",id:"token-faucet",level:3},{value:"Transactions",id:"transactions",level:2},{value:"Issuing transactions",id:"issuing-transactions",level:3},{value:"Reading transactions",id:"reading-transactions",level:3},{value:"Clarity types in Javascript",id:"clarity-types-in-javascript",level:3},{value:"Reading BNS names",id:"reading-bns-names",level:2},{value:"Development walkthrough video",id:"development-walkthrough-video",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,s.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(o.ZP,{mdxType:"NodeLTS"}),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"This example application demonstrates important features of the Stacks blockchain, and is a case study for how a frontend\nweb application can interact with a Clarity smart contract. The full source of the application is provided and\ncompletely open source for you to use or modify. This page highlights important code snippets and design patterns to\nhelp you learn how to develop your own Stacks application."),(0,s.kt)("p",null,"This app showcases the following platform features:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Authenticating users with the web wallet"),(0,s.kt)("li",{parentName:"ul"},"Using a smart contract to store data on the blockchain"),(0,s.kt)("li",{parentName:"ul"},"Minting new fungible tokens with a ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/hstove/sips/blob/feat/sip-10-ft/sips/sip-010/sip-010-fungible-token-standard.md"},"SIP-010")," compliant smart contract"),(0,s.kt)("li",{parentName:"ul"},"Creating and monitoring transactions on the Stacks blockchain using ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/blockstack/stacks.js"},"Stacks.js"))),(0,s.kt)("p",null,"You can access the ",(0,s.kt)("a",{parentName:"p",href:"https://heystack.xyz"},"online version of the Heystack app")," to interact with it. The source for Heystack is also\navailable on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack"},"Github"),". This page assumes some familiarity with ",(0,s.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),"."),(0,s.kt)("h2",{id:"heystack-overview"},"Heystack overview"),(0,s.kt)("p",null,"Heystack is a web application for chatting with other Stacks users. The application uses the ",(0,s.kt)("a",{parentName:"p",href:"https://leather.io/install-extension"},"Leather wallet")," to\nauthenticate users in the frontend. When a user logs in to Heystack, they're given a genesis amount of $HEY fungible\ntokens, which allows them to send and like messages on the platform."),(0,s.kt)("p",null,"Heystack is powered by Clarity smart contracts so each message is a transaction on the Stacks blockchain. Each time a\nuser sends a message on the platform, they must sign the message with the ",(0,s.kt)("a",{parentName:"p",href:"https://leather.io/install-extension"},"Leather wallet")," (or another compatible\nwallet) and pay a small gas fee in STX. A user spends a $HEY token to send every message, and receives a $HEY token for\nevery like that their messages receive."),(0,s.kt)("p",null,"The following video provides a brief overview of the Heystack application:"),(0,s.kt)("br",null),(0,s.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/2_xAIctJqGw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,s.kt)("h2",{id:"review-smart-contracts"},"Review smart contracts"),(0,s.kt)("p",null,"Heystack depends on two smart contracts to execute the backend functions of the app on the Stacks blockchain:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a contract for handling the messaging content"),(0,s.kt)("li",{parentName:"ul"},"a contract for minting and distributing the $HEY token")),(0,s.kt)("p",null,"As a best practice, these two contracts are separate because of the different functionality they handle. This is an\nexercise in ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Separation_of_concerns"},"separation of concerns"),"."),(0,s.kt)("h3",{id:"content-contract"},"Content contract"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"hey.clar")," contract provides two primary functions for the application, one to publish content to\nthe blockchain and another to like a piece of content based on its ID. This section reviews the implementation of\nthese primary functions, but is not a comprehensive discussion of the contract."),(0,s.kt)("p",null,"In order to accomplish the two primary functions, the contract relies on a data variable ",(0,s.kt)("inlineCode",{parentName:"p"},"content-index")," and two\n",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#define-map"},"data maps"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"like-state")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"publisher-state")," which contain the number of likes a piece of content has received, and\nthe principal address of the account that published the content."),(0,s.kt)("p",null,"Note that all variables are defined at the top of the contract, which is a requirement of the Clarity language. These\ninclude constants such as the ",(0,s.kt)("inlineCode",{parentName:"p"},"contract-creator"),", error codes, and a treasury address."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},";;\n;; Data maps and vars\n(define-data-var content-index uint u0)\n\n(define-read-only (get-content-index)\n  (ok (var-get content-index))\n)\n\n(define-map like-state\n  { content-index: uint }\n  { likes: uint }\n)\n\n(define-map publisher-state\n  { content-index: uint }\n  { publisher: principal }\n)\n")),(0,s.kt)("p",null,"Read-only functions provide a method for getting the like count of a piece of content, and getting the principal address\nof the message publisher."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},"(define-read-only (get-like-count (id uint))\n  ;; Checks map for like count of given id\n  ;; defaults to 0 likes if no entry found\n  (ok (default-to { likes: u0 } (map-get? like-state { content-index: id })))\n)\n\n(define-read-only (get-message-publisher (id uint))\n  ;; Checks map for like count of given id\n  ;; defaults to 0 likes if no entry found\n  (ok (unwrap-panic (get publisher (map-get? publisher-state { content-index: id }))))\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"get-like-count")," method accepts a content ID and returns the number of likes associated with that content. The\nmethod uses the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#default-to"},(0,s.kt)("inlineCode",{parentName:"a"},"default-to"))," function to return ",(0,s.kt)("inlineCode",{parentName:"p"},"0")," if the content ID isn't found in the map of likes."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"get-message-publisher")," method accepts a content ID and returns the principal address of the content publisher. The\nmethod uses the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#unwrap-panic"},(0,s.kt)("inlineCode",{parentName:"a"},"unwrap-panic"))," function to halt execution of the method if the principal address isn't found in\nthe map of publishers."),(0,s.kt)("p",null,"The two primary public methods are the ",(0,s.kt)("inlineCode",{parentName:"p"},"send-message")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"like-message")," functions. These methods allow the contract\ncaller to store a message on the blockchain (creating entries in the data maps for the message sender and the number\nof likes). Note that the message itself isn't stored in a contract variable, the frontend application reads the content\nof the message directly from the transaction on the blockchain."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},";;\n;; Public functions\n(define-public (send-message (content (string-utf8 140)))\n  (let ((id (unwrap! (increment-content-index) (err u0))))\n    (print { content: content, publisher: tx-sender, index: id })\n    (map-set like-state\n      { content-index: id }\n      { likes: u0 }\n    )\n    (map-set publisher-state\n      { content-index: id }\n      { publisher: tx-sender }\n    )\n    (transfer-hey u1 HEY_TREASURY)\n  )\n)\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"send-message")," method accepts a utf-8 string with a maximum length of 140 characters. The method defines an internal\nvariable ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," using the ",(0,s.kt)("inlineCode",{parentName:"p"},"let")," function and assigns the next content ID to that variable by calling the\n",(0,s.kt)("inlineCode",{parentName:"p"},"increment-contract-index")," method of the contract. The value assignment of this variable is bound by the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#unwrap"},(0,s.kt)("inlineCode",{parentName:"a"},"unwrap!")),"\nfunction, which returns an error and exits the control-flow if the ",(0,s.kt)("inlineCode",{parentName:"p"},"increment-contract-index")," function isn't\nsuccessfully called."),(0,s.kt)("p",null,"The method then assigns ",(0,s.kt)("inlineCode",{parentName:"p"},"u0")," likes to the content in the ",(0,s.kt)("inlineCode",{parentName:"p"},"like-state")," data map, and adds the principal address to the\n",(0,s.kt)("inlineCode",{parentName:"p"},"publisher-state")," data map using the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#map-set"},(0,s.kt)("inlineCode",{parentName:"a"},"map-set"))," function. Finally, the private method ",(0,s.kt)("inlineCode",{parentName:"p"},"transfer-hey")," is called to\ntransfer 1 $HEY token from the message sender to the $HEY treasury address stored in the ",(0,s.kt)("inlineCode",{parentName:"p"},"HEY_TREASURY")," constant."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},"(define-public (like-message (id uint))\n  (begin\n    ;; cannot like content that doesn't exist\n    (asserts! (>= (var-get content-index) id) (err ERR_CANNOT_LIKE_NON_EXISTENT_CONTENT))\n    ;; transfer 1 HEY to the principal that created the content\n    (map-set like-state\n      { content-index: id }\n      { likes: (+ u1 (get likes (unwrap! (get-like-count id) (err u0)))) }\n    )\n    (transfer-hey u1 (unwrap-panic (get-message-publisher id)))\n  )\n)\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"like-message")," method accepts a content ID. The method checks that the ID is lower than the current content ID using\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#asserts"},(0,s.kt)("inlineCode",{parentName:"a"},"asserts!"))," function, to verify that the provided ID is a valid ID. If the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#asserts"},(0,s.kt)("inlineCode",{parentName:"a"},"asserts!"))," assessment is ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),",\nthe method returns an error code. If the ID is valid, the method performs a ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#map-set"},(0,s.kt)("inlineCode",{parentName:"a"},"map-set"))," to look up the content in the\n",(0,s.kt)("inlineCode",{parentName:"p"},"like-state")," data map and add a like to the value stored in the map. Once again, the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#unwrap"},(0,s.kt)("inlineCode",{parentName:"a"},"unwrap!"))," function is used to\nensure that an invalid value isn't stored in the map."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"hey.clar")," contract provides some additional functions for working with the $HEY token contract, discussed in the\nnext section."),(0,s.kt)("h3",{id:"token-contract"},"Token contract"),(0,s.kt)("p",null,"Heystack creates a native fungible token for use in the application. When a user authenticates with Heystack, they're\nautomatically eligible to claim 100 $HEY tokens to allow them to start messaging."),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/hstove/sips/blob/feat/sip-10-ft/sips/sip-010/sip-010-fungible-token-standard.md"},"SIP-010")," defines the fungible token standard on Stacks, which allows Stacks compatible wallets to handle fungible\ntokens through a set of standardized methods. SIP-010 defines 7 traits that a fungible token contract must have in order\nto be compliant:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"transfer"),": method for transferring the token from one principal to another"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-name"),": returns the human-readable name of the token"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-symbol"),": returns the ticker symbol of the token"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-decimals"),": returns number of decimal places in the token"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-balance"),": return the balance of a given principal"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-total-supply"),": returns the total supply of the token"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"get-token-uri"),": returns an optional string that resolves to a valid URI for the token's metadata.")),(0,s.kt)("p",null,"In Clarity, a contract can declare that it intends to implement a set of standard traits."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},"\n;; Implement the `ft-trait` trait defined in the `ft-trait` contract\n;; https://github.com/hstove/stacks-fungible-token\n(impl-trait 'ST3J2GVMMM2R07ZFBJDWTYEYAR8FZH5WKDTFJ9AHA.ft-trait.sip-010-trait)\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/references/language-functions#impl-trait"},(0,s.kt)("inlineCode",{parentName:"a"},"impl-trait"))," function asserts that the smart contract is fully implementing a given set of traits defined by the\nargument. Like variable definitions, ",(0,s.kt)("inlineCode",{parentName:"p"},"impl-trait")," must be declared at the top of a smart contract definition."),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The contract address for SIP-010 trait definition is different depending on which network (mainnet, testnet, etc.)\nyour contract is deployed on. See the standard for the current addresses of the standard traits.")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"hey-token.clar")," contract implements the required 7 traits of ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hstove/sips/blob/feat/sip-10-ft/sips/sip-010/sip-010-fungible-token-standard.md"},"SIP-010"),", and one additional method, the\n",(0,s.kt)("inlineCode",{parentName:"p"},"gift-tokens")," method, that allows a principal to request tokens from the contract."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-clarity"},"(define-public (gift-tokens (recipient principal))\n  (begin\n    (asserts! (is-eq tx-sender recipient) (err u0))\n    (ft-mint? hey-token u1 recipient)\n  )\n)\n")),(0,s.kt)("h2",{id:"authentication"},"Authentication"),(0,s.kt)("p",null,"Authentication is handled through the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/connect#readme"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/connect-react"))," and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks.js/tree/master/packages/auth"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/auth"))," packages, which interact with\ncompatible Stacks wallet extensions and provide methods for interacting with a user session respectively. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/pmndrs/jotai"},"Jotai"),"\nprovides application state management."),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/main/src/components/connect-wallet-button.tsx"},"connect wallet button component")," implements the interface with the Leather wallet through the\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/connect#readme"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/connect-react"))," package."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Button } from '@components/button';\nimport React from 'react';\nimport { useConnect } from '@stacks/connect-react';\nimport { ButtonProps } from '@stacks/ui';\nimport { useLoading } from '@hooks/use-loading';\nimport { LOADING_KEYS } from '@store/ui';\n\nexport const ConnectWalletButton: React.FC<ButtonProps> = props => {\n  const { doOpenAuth } = useConnect();\n  const { isLoading, setIsLoading } = useLoading(LOADING_KEYS.AUTH);\n  return (\n    <Button\n      isLoading={isLoading}\n      onClick={() => {\n        void setIsLoading(true);\n        doOpenAuth();\n      }}\n      {...props}\n    >\n      Connect wallet\n    </Button>\n  );\n};\n")),(0,s.kt)("p",null,"Once connected, ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/main/src/store/auth.ts"},(0,s.kt)("inlineCode",{parentName:"a"},"/src/store/auth.ts"))," populates the user session data into the Jotai store, allowing the application\nto access the user information."),(0,s.kt)("p",null,"You can see in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/63ce30f4f6de7a9c846fcdba3acbb6c7b82b83e3/src/components/welcome-panel.tsx#L102"},"welcome panel component")," how the presence or absence of stored user data is used to display the\nwallet connect button or the signed in view."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'...\nconst UserSection = memo((props: StackProps) => {\n  const { user } = useUser();\n\n  return (\n    <Stack\n      alignItems="center"\n      justifyContent="center"\n      flexGrow={1}\n      spacing="loose"\n      textAlign="center"\n      {...props}\n    >\n      {!user ? <SignedOutView /> : <SignedInView onClick={() => console.log(\'click\')} />}\n    </Stack>\n  );\n});\n...\n')),(0,s.kt)("h3",{id:"token-faucet"},"Token faucet"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"use-claim-hey.ts")," file provides a React hook for interacting with the token faucet of the Clarity smart contract."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { useLoading } from '@hooks/use-loading';\nimport { LOADING_KEYS } from '@store/ui';\nimport { useConnect } from '@stacks/connect-react';\nimport { useNetwork } from '@hooks/use-network';\nimport { useCallback } from 'react';\nimport { useHeyContract } from '@hooks/use-hey-contract';\nimport { REQUEST_FUNCTION } from '@common/constants';\nimport { principalCV } from '@stacks/transactions/dist/clarity/types/principalCV';\nimport { useCurrentAddress } from '@hooks/use-current-address';\n\nexport function useHandleClaimHey() {\n  const address = useCurrentAddress();\n  const { setIsLoading } = useLoading(LOADING_KEYS.CLAIM_HEY);\n  const { doContractCall } = useConnect();\n  const [contractAddress, contractName] = useHeyContract();\n  const network = useNetwork();\n\n  const onFinish = useCallback(() => {\n    void setIsLoading(false);\n  }, [setIsLoading]);\n\n  const onCancel = useCallback(() => {\n    void setIsLoading(false);\n  }, [setIsLoading]);\n\n  return useCallback(() => {\n    void setIsLoading(true);\n    void doContractCall({\n      contractAddress,\n      contractName,\n      functionName: REQUEST_FUNCTION,\n      functionArgs: [principalCV(address)],\n      onFinish,\n      onCancel,\n      network,\n      stxAddress: address,\n    });\n  }, [setIsLoading, onFinish, network, onCancel, address, doContractCall]);\n}\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/connect#readme"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/connect-react"))," package exports the ",(0,s.kt)("inlineCode",{parentName:"p"},"doContractCall")," method, which interacts with the smart contract on\nthe blockchain. There are more examples of transaction calls in the next section. It's important to note that it's\nnecessary to convert Javascript types to Clarity types using the types exported by the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks.js/tree/master/packages/transactions#constructing-clarity-values"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/transactions"))," package.\nFurther discussion of this conversion is in the ",(0,s.kt)("a",{parentName:"p",href:"#clarity-types-in-javascript"},"Clarity types in Javascript")," section."),(0,s.kt)("h2",{id:"transactions"},"Transactions"),(0,s.kt)("p",null,"Since messages in Heystack are transactions against a Clarity smart contract, the application must be able to create\ntransactions and read their content from the blockchain. The following sections highlight code snippets that perform\nClarity transactions and read both completed and pending transactions from the Stacks blockchain."),(0,s.kt)("h3",{id:"issuing-transactions"},"Issuing transactions"),(0,s.kt)("p",null,"The two primary functions of the ",(0,s.kt)("inlineCode",{parentName:"p"},"hey.clar")," smart contract are publishing a message and accepting a like on an already\npublished message. The ","[",(0,s.kt)("inlineCode",{parentName:"p"},"src/hooks/use-publish-hey.ts"),"][]"," file implements the frontend method for calling the smart\ncontract on the blockchain with the appropriate values."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"...\n  return useCallback(\n    (content: string, _onFinish: () => void) => {\n      void setShowPendingOverlay(true);\n      void setIsLoading(true);\n\n      void doContractCall({\n        contractAddress,\n        contractName,\n        functionName: MESSAGE_FUNCTION,\n        functionArgs: [\n          stringUtf8CV(content),\n          attachmentUri !== '' ? someCV(stringUtf8CV(attachmentUri)) : noneCV(),\n        ],\n        onFinish: () => {\n          _onFinish();\n          onFinish();\n        },\n        postConditions: [\n          createFungiblePostCondition(\n            address,\n            FungibleConditionCode.Equal,\n            new BN(1),\n            createAssetInfo(contractAddress, 'hey-token', 'hey-token')\n          ),\n        ],\n        onCancel,\n        network,\n        stxAddress: address,\n      });\n    },\n    [setIsLoading, onFinish, network, onCancel, address, doContractCall]\n  );\n...\n")),(0,s.kt)("p",null,"The frontend uses the ",(0,s.kt)("inlineCode",{parentName:"p"},"doContractCall")," function from the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/connect#readme"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/connect-react"))," package to perform the call to the\nClarity smart contract. In order to support the mapping of ",(0,s.kt)("a",{parentName:"p",href:"#clarity-types-in-javascript"},"Javascript types to Clarity types"),", helpers exported from\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks.js/tree/master/packages/transactions#constructing-clarity-values"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/transactions"))," package are used as arguments to the contract call."),(0,s.kt)("p",null,"Note that the contract call also create post conditions to verify that a single $HEY token is transferred by the\nexecution of the contract call. Post conditions are a powerful feature of Clarity that can be used to prevent\nrug-pulling and other detrimental behavior by smart contracts."),(0,s.kt)("h3",{id:"reading-transactions"},"Reading transactions"),(0,s.kt)("p",null,"Heystack achieves pseudo-real-time messaging by reading both confirmed and pending transactions from the blockchain.\nPending transactions are read from the mempool, whereas confirmed transactions are read directly from the chain. The\n",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/main/src/store/hey.ts"},(0,s.kt)("inlineCode",{parentName:"a"},"src/store/hey.ts"))," file contains the implementation of both."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"...\nexport const heyTransactionsAtom = atomWithQuery<ContractCallTransaction[], string>(get => ({\n  queryKey: ['hey-txs'],\n  ...(defaultOptions as any),\n  refetchInterval: 500,\n  queryFn: async (): Promise<ContractCallTransaction[]> => {\n    const client = get(accountsClientAtom);\n    const txClient = get(transactionsClientAtom);\n\n    const txs = await client.getAccountTransactions({\n      limit: 50,\n      principal: HEY_CONTRACT,\n    });\n    const txids = (txs as TransactionResults).results\n      .filter(\n        tx =>\n          tx.tx_type === 'contract_call' &&\n          tx.contract_call.function_name === MESSAGE_FUNCTION &&\n          tx.tx_status === 'success'\n      )\n      .map(tx => tx.tx_id);\n\n    const final = await Promise.all(txids.map(async txId => txClient.getTransactionById({ txId })));\n    return final as ContractCallTransaction[];\n  },\n}));\n...\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"getAccountTransactions")," from the ",(0,s.kt)("inlineCode",{parentName:"p"},"AccountsApi")," object exported by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api/tree/master/client"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/blockchain-api-client"))," is used to\nread confirmed blockchain transactions against the ",(0,s.kt)("inlineCode",{parentName:"p"},"hey.clar")," contract from the Stacks API. The list of transactions\nreturned by the API is filtered to only transactions representing a call to the message function that was successful,\nand then mapped to an array of transaction IDs."),(0,s.kt)("p",null,"Finally, the array of IDs is used to read each full transaction from the blockchain using the ",(0,s.kt)("inlineCode",{parentName:"p"},"getTransactionsById"),"\nmethod from the ",(0,s.kt)("inlineCode",{parentName:"p"},"TransactionsApi")," object exported by the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api/tree/master/client"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/blockchain-api-client"))," package."),(0,s.kt)("p",null,"Pending transactions are read from the mempool in a similar implementation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export const pendingTxsAtom = atomWithQuery<Heystack[], string>(get => ({\n  queryKey: ['hey-pending-txs'],\n  refetchInterval: 1000,\n  ...(defaultOptions as any),\n  queryFn: async (): Promise<Heystack[]> => {\n    const client = get(transactionsClientAtom);\n\n    const txs = await client.getMempoolTransactionList({ limit: 96 });\n    const heyTxs = (txs as MempoolTransactionListResponse).results\n      .filter(\n        tx =>\n          tx.tx_type === 'contract_call' &&\n          tx.contract_call.contract_id === HEY_CONTRACT &&\n          tx.contract_call.function_name === MESSAGE_FUNCTION &&\n          tx.tx_status === 'pending'\n      )\n      .map(tx => tx.tx_id);\n\n    const final = await Promise.all(heyTxs.map(async txId => client.getTransactionById({ txId })));\n\n    return (\n      (final as ContractCallTransaction[]).map(tx => {\n        const attachment = tx.contract_call.function_args?.[1].repr\n          .replace(`(some u\"`, '')\n          .slice(0, -1);\n\n        return {\n          sender: tx.sender_address,\n          content: tx.contract_call.function_args?.[0].repr\n            .replace(`u\"`, '')\n            .slice(0, -1) as string,\n          id: tx.tx_id,\n          attachment: attachment === 'non' ? undefined : attachment,\n          timestamp: (tx as any).receipt_time,\n          isPending: true,\n        };\n      }) || []\n    );\n  },\n}));\n")),(0,s.kt)("p",null,"Pending transactions are read from the mempool using the ",(0,s.kt)("inlineCode",{parentName:"p"},"getMempoolTransactionList")," method from the ",(0,s.kt)("inlineCode",{parentName:"p"},"TransactionsApi"),"\nexported by ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api/tree/master/client"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/blockchain-api-client")),". Similar to confirmed transactions, the returned array is filtered to\na list of IDs, and then used to generate an array of full transactions."),(0,s.kt)("p",null,"Because of differences in the data structure of the pending transactions vs. confirmed transactions, the pending\ntransaction list must be standardized before being returned."),(0,s.kt)("p",null,"Note that for the low stakes of a messaging app, pending transactions can be treated as likely permanent state\ntransitions. For applications implementing higher stakes business logic (such as the transfer of representations\nof value) it would be more appropriate to wait to display confirmed transactions."),(0,s.kt)("h3",{id:"clarity-types-in-javascript"},"Clarity types in Javascript"),(0,s.kt)("p",null,"In order to create transactions to call functions in Clarity contracts, the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks.js/tree/master/packages/transactions#constructing-clarity-values"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/transactions"))," package exports\nclasses that make it easy to construct well-typed Clarity values in Javascript. According to the Clarity language\nspecification, Clarity has the following types:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(tuple (key-name-0 key-type 0) (key-name-1 key-type-1) ...)")," - a typed tuple with named fields"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(list max-len entry-type)")," - a list of maximum length ",(0,s.kt)("inlineCode",{parentName:"li"},"max-len"),", with entries of type ",(0,s.kt)("inlineCode",{parentName:"li"},"entry-type")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(response ok-type err-type)")," - object used by public functions to commit their state changes or abort"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(optional some-type)")," - an option type for objects that can be either ",(0,s.kt)("inlineCode",{parentName:"li"},"(some-value)")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"none")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"(buff max-len)")," - byte buffer of maximum length"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"principal")," - object representing a principal address (contract or standard)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bool")," - boolean value (",(0,s.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"false"),")"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"int")," - signed 128-bit integer"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"uint")," - unsigned 128-bit integer")),(0,s.kt)("p",null,"To support these types in Javascript, ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks.js/tree/master/packages/transactions#constructing-clarity-values"},(0,s.kt)("inlineCode",{parentName:"a"},"@stacks/transactions"))," exports the following helpers:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"// construct boolean clarity values\nconst t = trueCV();\nconst f = falseCV();\n\n// construct optional clarity values\nconst nothing = noneCV();\nconst something = someCV(t);\n\n// construct a buffer clarity value from an existing Buffer\nconst buffer = Buffer.from('foo');\nconst bufCV = bufferCV(buffer);\n\n// construct signed and unsigned integer clarity values\nconst i = intCV(-10);\nconst u = uintCV(10);\n\n// construct principal clarity values\nconst address = 'SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B';\nconst contractName = 'contract-name';\nconst spCV = standardPrincipalCV(address);\nconst cpCV = contractPrincipalCV(address, contractName);\n\n// construct response clarity values\nconst errCV = responseErrorCV(trueCV());\nconst okCV = responseOkCV(falseCV());\n\n// construct tuple clarity values\nconst tupCV = tupleCV({\n  a: intCV(1),\n  b: trueCV(),\n  c: falseCV(),\n});\n\n// construct list clarity values\nconst l = listCV([trueCV(), falseCV()]);\n")),(0,s.kt)("p",null,"You should use these helpers when calling Clarity contracts with Javascript to avoid failed contract calls due to bad\ntyping."),(0,s.kt)("h2",{id:"reading-bns-names"},"Reading BNS names"),(0,s.kt)("p",null,"An important feature of Stacks is the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.stacks.co/build-apps/references/bns"},"Bitcoin Naming System")," (BNS). BNS allows users to register a human-readable\nidentity to their account, that can act as both a username and a web address."),(0,s.kt)("p",null,"Names registered to a user can be read from a Stacks API endpoint, as demonstrated in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/main/src/store/names.ts"},(0,s.kt)("inlineCode",{parentName:"a"},"src/store/names.ts")),"."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Due to ecosystem limitations, it's currently uncommon for BNS names to be registered on any testnet. For the purpose\nof demonstration, Heystack looks for BNS names against the user's mainnet wallet address.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export const namesAtom = atomFamily((address: string) =>\n  atom(async get => {\n    if (!address || address === '') return;\n    const network = get(mainnetNetworkAtom);\n    if (!network) return null;\n\n    const local = getLocalNames(network.coreApiUrl, address);\n\n    if (local) {\n      const [names, timestamp] = local;\n      const now = Date.now();\n      const isStale = now - timestamp > STALE_TIME;\n      if (!isStale) return names;\n    }\n\n    try {\n      const names = await fetchNamesByAddress({\n        networkUrl: network.coreApiUrl,\n        address,\n      });\n      if (names?.length) {\n        setLocalNames(network.coreApiUrl, address, [names, Date.now()]);\n      }\n      return names || [];\n    } catch (e) {\n      console.error(e);\n      return [];\n    }\n  })\n);\n")),(0,s.kt)("p",null,"In order to reduce network traffic, Heystack also caches names in the browser's local storage."),(0,s.kt)("p",null,"A common design pattern in Stacks 2.0 apps is to check if a user has a registered BNS name (only 1 name can be tied to\nan account) and display that name in the app where appropriate. If the user doesn't own a BNS name, the wallet address\nis used as a stand in. Often, the wallet address is truncated to avoid displaying an overly long string."),(0,s.kt)("p",null,"The account name component in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/heystack/blob/22e4e9020f8bbb404e8c1e36f32f000050f90818/src/components/user-area.tsx#L62"},(0,s.kt)("inlineCode",{parentName:"a"},"src/components/user-area.tsx"))," demonstrates this design pattern:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'...\nconst AccountNameComponent = memo(() => {\n  const { user } = useUser();\n  const address = useCurrentMainnetAddress();\n  const names = useAccountNames(address);\n  const name = names?.[0];\n  return <Text mb="tight">{name || user?.username || truncateMiddle(address)}</Text>;\n});\n...\n')),(0,s.kt)("h2",{id:"development-walkthrough-video"},"Development walkthrough video"),(0,s.kt)("p",null,"If you would like to learn more about the Heystack application and how it was developed, the following video presents\nspecific implementation details."),(0,s.kt)("br",null),(0,s.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/e-IfT5CI-Gw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}h.isMDXComponent=!0},6365:(e,t,n)=>{n.d(t,{ZP:()=>r});var a=n(87462),s=(n(67294),n(3905));const o={toc:[]},i="wrapper";function r(e){let{components:t,...n}=e;return(0,s.kt)(i,(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"The example apps depend on a stable version of NodeJS. Install the LTS version of NodeJS using ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm/blob/master/README.md#installing-and-updating"},"nvm")," with the following command: ",(0,s.kt)("inlineCode",{parentName:"p"},"nvm install --lts"))))}r.isMDXComponent=!0}}]);