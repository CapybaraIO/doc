"use strict";(self.webpackChunk_CapybaraIO_docs=self.webpackChunk_CapybaraIO_docs||[]).push([[9069],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,y=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return n?a.createElement(y,o(o({ref:t},p),{},{components:n})):a.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},91255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={Title:"Use Clarity Values"},o="Using Clarity Values",c={unversionedId:"stacks-blockchain-api/feature-guides/use-clarity-values",id:"stacks-blockchain-api/feature-guides/use-clarity-values",title:"Using Clarity Values",description:"Some endpoints, like the read-only function contract call, require input to a serialized Clarity value. Other endpoints return serialized values that need to be deserialized.",source:"@site/docs/stacks-blockchain-api/feature-guides/use-clarity-values.md",sourceDirName:"stacks-blockchain-api/feature-guides",slug:"/stacks-blockchain-api/feature-guides/use-clarity-values",permalink:"/doc/stacks-blockchain-api/feature-guides/use-clarity-values",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/stacks-blockchain-api/feature-guides/use-clarity-values.md",tags:[],version:"current",lastUpdatedAt:1703206175,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{Title:"Use Clarity Values"},sidebar:"stacks-api",previous:{title:"Stacks Blockchain API",permalink:"/doc/stacks-blockchain-api/feature-guides/use-stacks-blockchain-api"},next:{title:"Microblocks",permalink:"/doc/stacks-blockchain-api/feature-guides/microblocks"}},s={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-clarity-values"},"Using Clarity Values"),(0,r.kt)("p",null,"Some endpoints, like the ",(0,r.kt)("a",{parentName:"p",href:"https://capybaraio.github.io/doc/api#operation/call_read_only_function"},"read-only function contract call"),", require input to a serialized ",(0,r.kt)("a",{parentName:"p",href:"https://docs.stacks.co/docs/clarity/"},"Clarity value"),". Other endpoints return serialized values that need to be deserialized."),(0,r.kt)("p",null,"The example shown below illustrates Clarity value usage in combination with the API."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@stacks/transactions")," library supports typed contract calls and makes ",(0,r.kt)("a",{parentName:"p",href:"https://docs.stacks.co/docs/clarity/"},"response value utilization much simpler"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Configuration,\n  SmartContractsApiInterface,\n  SmartContractsApi,\n  ReadOnlyFunctionSuccessResponse,\n} from '@stacks/blockchain-api-client';\nimport { uintCV, UIntCV, cvToHex, hexToCV, ClarityType } from '@stacks/transactions';\n\n(async () => {\n  const apiConfig: Configuration = new Configuration({\n    fetchApi: fetch,\n    // for mainnet, replace `testnet` with `mainnet`\n    basePath: 'https://api.testnet.hiro.so', // defaults to http://localhost:3999\n  });\n\n  const contractsApi: SmartContractsApiInterface = new SmartContractsApi(apiConfig);\n\n  const principal: string = 'ST000000000000000000002AMW42H';\n\n  // use most recent from: https://api.<mainnet/testnet>.hiro.so/v2/pox\n  const rewardCycle: UIntCV = uintCV(22);\n\n  // call a read-only function\n  const fnCall: ReadOnlyFunctionSuccessResponse = await contractsApi.callReadOnlyFunction({\n    contractAddress: principal,\n    contractName: 'pox',\n    functionName: 'is-pox-active',\n    readOnlyFunctionArgs: {\n      sender: principal,\n      arguments: [cvToHex(rewardCycle)],\n    },\n  });\n\n  console.log({\n    status: fnCall.okay,\n    result: fnCall.result,\n    representation: hexToCV(fnCall.result).type === ClarityType.BoolTrue,\n  });\n})().catch(console.error);\n")))}d.isMDXComponent=!0}}]);