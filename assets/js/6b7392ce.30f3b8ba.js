"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[1293],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=i,u=d["".concat(l,".").concat(h)]||d[h]||k[h]||o;return n?a.createElement(u,r(r({ref:t},p),{},{components:n})):a.createElement(u,r({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},87130:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),i=(n(67294),n(3905));const o={id:"running-api-node",title:"Running a Stacks API node"},r=void 0,s={unversionedId:"get-started/running-api-node",id:"get-started/running-api-node",title:"Running a Stacks API node",description:"This procedure demonstrates how to run a local API node using Docker images. Several components must be",source:"@site/docs/get-started/running-api-node.md",sourceDirName:"get-started",slug:"/get-started/running-api-node",permalink:"/doc/get-started/running-api-node",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/get-started/running-api-node.md",tags:[],version:"current",frontMatter:{id:"running-api-node",title:"Running a Stacks API node"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Firewall configuration",id:"firewall-configuration",level:3},{value:"Step 1: Initial setup",id:"step-1-initial-setup",level:2},{value:"Step 2: Running Postgres",id:"step-2-running-postgres",level:2},{value:"Step 3: Running Stacks blockchain API",id:"step-3-running-stacks-blockchain-api",level:2},{value:"Step 4: Running Stacks blockchain",id:"step-4-running-stacks-blockchain",level:2},{value:"Step 5: Verifying the services",id:"step-5-verifying-the-services",level:2},{value:"Stopping the API node",id:"stopping-the-api-node",level:2},{value:"Additional reading",id:"additional-reading",level:2}],p={toc:c},d="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This procedure demonstrates how to run a local API node using Docker images. Several components must be\nconfigured and run in a specific order for the local API node to work."),(0,i.kt)("p",null,"The order in which the services are brought up is very important for this procedure. To start the API node\nsuccessfully, you need to bring up the services in the following order:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"postgres")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"stacks-blockchain-api")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"stacks-blockchain"))),(0,i.kt)("p",null,"When bringing down the API node, you should bring the services down in the exact reverse order in which they were\nbrought up to avoid losing data."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This procedure focuses on Unix-like operating systems (Linux and MacOS). This procedure has not been tested on\nWindows.")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Running a node has no specialized hardware requirements. Users have successfully run nodes on Raspberry Pi\nboards and other system-on-chip architectures. To complete this procedure, you must have the following software\ninstalled on the node host machine:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://curl.se/download.html"},"curl")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://postgresguide.com/utilities/psql.html"},"psql")," (",(0,i.kt)("em",{parentName:"li"},"installed locally"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://stedolan.github.io/jq/download/"},"jq"))),(0,i.kt)("h3",{id:"firewall-configuration"},"Firewall configuration"),(0,i.kt)("p",null,"For the API node services to work correctly, you must configure any network firewall rules to allow traffic on\nthe ports discussed in this section. The network and firewall configuration details are highly specific to your\nmachine and network, so a detailed example isn't provided."),(0,i.kt)("p",null,"The following ports must open on the host machine:"),(0,i.kt)("p",null,"Ingress:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"postgres (open to ",(0,i.kt)("inlineCode",{parentName:"li"},"localhost")," only):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"5432 TCP")))),(0,i.kt)("li",{parentName:"ul"},"stacks-blockchain-api",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3999 TCP")))),(0,i.kt)("li",{parentName:"ul"},"stacks-blockchain (open to ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0.0.0/0"),"):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20443 TCP")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20444 TCP"))))),(0,i.kt)("p",null,"Egress:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"8332")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"8333")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"20443-20444"))),(0,i.kt)("p",null,"These egress ports are for syncing ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," and Bitcoin headers. If they're not open, the sync will fail."),(0,i.kt)("h2",{id:"step-1-initial-setup"},"Step 1: Initial setup"),(0,i.kt)("p",null,"To run the API node, you must download the Docker images and create a directory structure to hold the\npersistent data from the services. Download and configure the Docker images with the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker pull blockstack/stacks-blockchain-api && docker pull blockstack/stacks-blockchain && docker pull postgres:alpine\ndocker network create stacks-blockchain > /dev/null 2>&1\n")),(0,i.kt)("p",null,"Create a directory structure for the service data with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir -p ./stacks-node/{persistent-data/postgres,persistent-data/stacks-blockchain,bns,config} && cd stacks-node\n")),(0,i.kt)("h2",{id:"step-2-running-postgres"},"Step 2: Running Postgres"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"postgres:alpine")," Docker container can be run with default settings. You must set the password for the user to\n",(0,i.kt)("inlineCode",{parentName:"p"},"postgres")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"POSTGRES_PASSWORD")," environment variable. The following command starts the image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm \\\n  --name postgres \\\n  --net=stacks-blockchain \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -v $(pwd)/persistent-data/postgres:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:alpine\n")),(0,i.kt)("p",null,"You can verify the running Postgres instance on port ",(0,i.kt)("inlineCode",{parentName:"p"},"5432")," with the command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker ps --filter name=postgres\n")),(0,i.kt)("h2",{id:"step-3-running-stacks-blockchain-api"},"Step 3: Running Stacks blockchain API"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain-api"))," image requires several environment variables to be set. To reduce the complexity of the\nrun command, you should create a new ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file and add the following to it using a text editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"NODE_ENV=production\nGIT_TAG=master\nPG_HOST=postgres\nPG_PORT=5432\nPG_USER=postgres\nPG_PASSWORD=postgres\nPG_DATABASE=postgres\nSTACKS_CHAIN_ID=0x00000001\nV2_POX_MIN_AMOUNT_USTX=90000000260\nSTACKS_CORE_EVENT_PORT=3700\nSTACKS_CORE_EVENT_HOST=0.0.0.0\nSTACKS_BLOCKCHAIN_API_PORT=3999\nSTACKS_BLOCKCHAIN_API_HOST=0.0.0.0\nSTACKS_BLOCKCHAIN_API_DB=pg\nSTACKS_CORE_RPC_HOST=stacks-blockchain\nSTACKS_CORE_RPC_PORT=20443\nBNS_IMPORT_DIR=/bns-data\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This guide configures the API to import BNS data with the ",(0,i.kt)("inlineCode",{parentName:"p"},"BNS_IMPORT_DIR")," variable. To turn off this import, comment\nthe line out by placing a ",(0,i.kt)("inlineCode",{parentName:"p"},"#")," at the beginning of the line. If you leave the BNS import enabled, the container may take several\nminutes to start while it imports the data.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PG_HOST")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"STACKS_CORE_RPC_HOST")," variables define the container names for ",(0,i.kt)("inlineCode",{parentName:"p"},"postgres")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stacks-blockchain"),".\nYou may wish to alter those values if you have named those containers differently than this guide."),(0,i.kt)("p",null,"Start the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain-api"))," image with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm \\\n  --name stacks-blockchain-api \\\n  --net=stacks-blockchain \\\n  --env-file $(pwd)/.env \\\n  -v $(pwd)/bns:/bns-data \\\n  -p 3700:3700 \\\n  -p 3999:3999 \\\n  blockstack/stacks-blockchain-api\n")),(0,i.kt)("p",null,"You can verify the running ",(0,i.kt)("inlineCode",{parentName:"p"},"stacks-blockchain-api")," container with the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker ps --filter name=stacks-blockchain-api\n")),(0,i.kt)("h2",{id:"step-4-running-stacks-blockchain"},"Step 4: Running Stacks blockchain"),(0,i.kt)("p",null,"For the API to be functional, the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain-api"))," container must have data from a running\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," instance. First create the ",(0,i.kt)("inlineCode",{parentName:"p"},"./config/mainnet/Config.toml")," file and add the following content to the file using a text editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[node]\nworking_dir = "/root/stacks-node/data"\nrpc_bind = "0.0.0.0:20443"\np2p_bind = "0.0.0.0:20444"\nbootstrap_node = "02da7a464ac770ae8337a343670778b93410f2f3fef6bea98dd1c3e9224459d36b@seed-0.mainnet.stacks.co:20444,02afeae522aab5f8c99a00ddf75fbcb4a641e052dd48836408d9cf437344b63516@seed-1.mainnet.stacks.co:20444,03652212ea76be0ed4cd83a25c06e57819993029a7b9999f7d63c36340b34a4e62@seed-2.mainnet.stacks.co:20444"\nwait_time_for_microblocks = 10000\n\n[[events_observer]]\nendpoint = "stacks-blockchain-api:3700"\nretry_count = 255\nevents_keys = ["*"]\n\n[burnchain]\nchain = "bitcoin"\nmode = "mainnet"\npeer_host = "bitcoin.blockstack.com"\nusername = "blockstack"\npassword = "blockstacksystem"\nrpc_port = 8332\npeer_port = 8333\n\n[connection_options]\nread_only_call_limit_write_length = 0\nread_only_call_limit_read_length = 100000\nread_only_call_limit_write_count = 0\nread_only_call_limit_read_count = 30\nread_only_call_limit_runtime = 1000000000\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[[events_observer]]")," block configures the instance to send blockchain events to the API container that you\nstarted previously."),(0,i.kt)("p",null,"Start the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," container with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm \\\n  --name stacks-blockchain \\\n  --net=stacks-blockchain \\\n  -v $(pwd)/persistent-data/stacks-blockchain:/root/stacks-node/data \\\n  -v $(pwd)/config:/src/stacks-node \\\n  -p 20443:20443 \\\n  -p 20444:20444 \\\n  blockstack/stacks-blockchain \\\n/bin/stacks-node start --config /src/stacks-node/Config.toml\n")),(0,i.kt)("p",null,"You can verify the running ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," container with the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker ps --filter name=stacks-blockchain\n")),(0,i.kt)("h2",{id:"step-5-verifying-the-services"},"Step 5: Verifying the services"),(0,i.kt)("p",null,"You can now verify that each of the services is running and talking to the others."),(0,i.kt)("p",null,"To verify the database is ready:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Connect to the Postgres instance with the command ",(0,i.kt)("inlineCode",{parentName:"li"},"psql -h localhost -U postgres"),". Use the password from the\n",(0,i.kt)("inlineCode",{parentName:"li"},"POSTGRES_PASSWORD")," environment variable you set when running the container."),(0,i.kt)("li",{parentName:"ol"},"List current databases with the command ",(0,i.kt)("inlineCode",{parentName:"li"},"\\l")),(0,i.kt)("li",{parentName:"ol"},"Disconnect from the database with the command ",(0,i.kt)("inlineCode",{parentName:"li"},"\\q"))),(0,i.kt)("p",null,"To verify the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," tip height is progressing use the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl -sL localhost:20443/v2/info | jq\n")),(0,i.kt)("p",null,"If the instance is running you should receive terminal output similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "peer_version": 402653184,\n  "pox_consensus": "89d752034e73ed10d3b97e6bcf3cff53367b4166",\n  "burn_block_height": 666143,\n  "stable_pox_consensus": "707f26d9d0d1b4c62881a093c99f9232bc74e744",\n  "stable_burn_block_height": 666136,\n  "server_version": "stacks-node 2.0.11.1.0-rc1 (master:67dccdf, release build, linux [x86_64])",\n  "network_id": 1,\n  "parent_network_id": 3652501241,\n  "stacks_tip_height": 61,\n  "stacks_tip": "e08b2fe3dce36fd6d015c2a839c8eb0885cbe29119c1e2a581f75bc5814bce6f",\n  "stacks_tip_consensus_hash": "ad9f4cb6155a5b4f5dcb719d0f6bee043038bc63",\n  "genesis_chainstate_hash": "74237aa39aa50a83de11a4f53e9d3bb7d43461d1de9873f402e5453ae60bc59b",\n  "unanchored_tip": "74d172df8f8934b468c5b0af2efdefe938e9848772d69bcaeffcfe1d6c6ef041",\n  "unanchored_seq": 0,\n  "exit_at_block_height": null\n}\n')),(0,i.kt)("p",null,"Verify the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain-api"))," is receiving data from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/blockstack/stacks-blockchain"},(0,i.kt)("inlineCode",{parentName:"a"},"stacks-blockchain"))," with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"curl -sL localhost:3999/v2/info | jq\n")),(0,i.kt)("p",null,"If the instance is configured correctly, you should receive terminal output similar to the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "peer_version": 402653184,\n  "pox_consensus": "e472cadc17dcf3bc1afafc6aa595899e55f25b72",\n  "burn_block_height": 666144,\n  "stable_pox_consensus": "6a6fb0aa75a8acd4919f56c9c4c81ce5bc42cac1",\n  "stable_burn_block_height": 666137,\n  "server_version": "stacks-node 2.0.11.1.0-rc1 (master:67dccdf, release build, linux [x86_64])",\n  "network_id": 1,\n  "parent_network_id": 3652501241,\n  "stacks_tip_height": 61,\n  "stacks_tip": "e08b2fe3dce36fd6d015c2a839c8eb0885cbe29119c1e2a581f75bc5814bce6f",\n  "stacks_tip_consensus_hash": "ad9f4cb6155a5b4f5dcb719d0f6bee043038bc63",\n  "genesis_chainstate_hash": "74237aa39aa50a83de11a4f53e9d3bb7d43461d1de9873f402e5453ae60bc59b",\n  "unanchored_tip": "74d172df8f8934b468c5b0af2efdefe938e9848772d69bcaeffcfe1d6c6ef041",\n  "unanchored_seq": 0,\n  "exit_at_block_height": null\n}\n')),(0,i.kt)("p",null,"Once the API runs, you can use it to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hirosystems/stacks-blockchain-api"},"interact with other API endpoints"),"."),(0,i.kt)("h2",{id:"stopping-the-api-node"},"Stopping the API node"),(0,i.kt)("p",null,"As discussed previously, if you want to bring down your API node, you must stop the services in the reverse order that\nyou started them. Performing the shutdown in this order ensures you don't lose any data while shutting down\nthe node."),(0,i.kt)("p",null,"Use the following commands to stop the local API node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"docker stop stacks-blockchain\ndocker stop stacks-blockchain-api\ndocker stop postgres\n")),(0,i.kt)("h2",{id:"additional-reading"},"Additional reading"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hirosystems/stacks-blockchain-api/blob/master/running_an_api.md"},"Running an API instance with Docker")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"stacks-blockchain-api")," repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hirosystems/stacks-blockchain-api/blob/master/running_api_from_source.md"},"Running an API instance from source")," in the ",(0,i.kt)("inlineCode",{parentName:"li"},"stacks-blockchain-api")," repository")))}k.isMDXComponent=!0}}]);