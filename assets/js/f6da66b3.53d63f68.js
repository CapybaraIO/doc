"use strict";(self.webpackChunk_hirosystems_docs=self.webpackChunk_hirosystems_docs||[]).push([[1742],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),k=i,h=u["".concat(s,".").concat(k)]||u[k]||d[k]||o;return n?a.createElement(h,r(r({ref:t},c),{},{components:n})):a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},46272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={},r="Use Chainhooks with Bitcoin",l={unversionedId:"chainhook/guides/chainhooks-with-bitcoin",id:"chainhook/guides/chainhooks-with-bitcoin",title:"Use Chainhooks with Bitcoin",description:"The following guide helps you define predicates to use Chainhook with Bitcoin. The predicates are specified based on if-this, then-that constructs.",source:"@site/docs/chainhook/guides/chainhooks-with-bitcoin.md",sourceDirName:"chainhook/guides",slug:"/chainhook/guides/chainhooks-with-bitcoin",permalink:"/doc/chainhook/guides/chainhooks-with-bitcoin",draft:!1,editUrl:"https://github.com/CapybaraIO/doc/tree/main/docs/chainhook/guides/chainhooks-with-bitcoin.md",tags:[],version:"current",lastUpdatedAt:1703206175,formattedLastUpdatedAt:"Dec 22, 2023",frontMatter:{},sidebar:"chainhook",previous:{title:"Run Chainhook as a Service Using Stacks",permalink:"/doc/chainhook/guides/chainhook-as-a-service-stacks"},next:{title:"Use Chainhooks with Stacks",permalink:"/doc/chainhook/guides/chainhooks-with-stacks"}},s={},p=[{value:"<code>if_this</code> Specifications",id:"if_this-specifications",level:2},{value:"<code>then_that</code> Constructs",id:"then_that-constructs",level:2},{value:"Additional configuration knobs available",id:"additional-configuration-knobs-available",level:2},{value:"Example predicate definition to post first five transfers",id:"example-predicate-definition-to-post-first-five-transfers",level:2},{value:"Example predicate with multiple networks",id:"example-predicate-with-multiple-networks",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"use-chainhooks-with-bitcoin"},"Use Chainhooks with Bitcoin"),(0,i.kt)("p",null,"The following guide helps you define predicates to use Chainhook with Bitcoin. The predicates are specified based on ",(0,i.kt)("inlineCode",{parentName:"p"},"if-this"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"then-that")," constructs."),(0,i.kt)("h2",{id:"if_this-specifications"},(0,i.kt)("inlineCode",{parentName:"h2"},"if_this")," Specifications"),(0,i.kt)("p",null,"Currently, ",(0,i.kt)("inlineCode",{parentName:"p"},"bitcoin")," predicates support the following ",(0,i.kt)("inlineCode",{parentName:"p"},"if_this")," constructs."),(0,i.kt)("p",null,"Get any transaction matching a given transaction ID (txid):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"txid")," mandatory argument admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"32 bytes hex encoded type.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "txid",\n    "equals": "0xfaaac1833dc4883e7ec28f61e35b41f896c395f8d288b1a177155de2abd6052f"\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction matching a given ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," payload:\nExample: Given the following ",(0,i.kt)("inlineCode",{parentName:"p"},"script_pubkey")," :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"OP_RETURN\nPUSHDATA(0x03)\n0x616263\n")),(0,i.kt)("p",null,"or ",(0,i.kt)("inlineCode",{parentName:"p"},"0x6a03616263")," in hex, the following predicates will match the transaction above."),(0,i.kt)("p",null,"Get any transaction, where its ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," payload starts with a set of characters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"starts_with")," mandatory argument admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ASCII string type. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"ab")),(0,i.kt)("li",{parentName:"ul"},"hex encoded bytes. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x6162"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "op_return": {\n      "starts_with": "ab"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction, where its ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," payload is equals to set of characters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"equals")," mandatory argument admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ASCII string type: Example ",(0,i.kt)("inlineCode",{parentName:"li"},"abc")),(0,i.kt)("li",{parentName:"ul"},"hex encoded bytes. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x616263"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "op_return": {\n      "equals": "0x616263"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction, where its ",(0,i.kt)("inlineCode",{parentName:"p"},"OP_RETURN")," payload ends with a set of characters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ends_with")," mandatory argument admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ASCII string type. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"bc")),(0,i.kt)("li",{parentName:"ul"},"hex encoded bytes. Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"0x6263"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "op_return": {\n      "ends_with": "0x6263"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction with a p2pkh output paying a given recipient:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"p2pkh")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'ASCII string type. Example: "mr1iPkD9N3RJZZxXRk7xF9d36gffa6exNC"'),(0,i.kt)("li",{parentName:"ul"},'hex encoded bytes type. Example: "0x76a914ee9369fb719c0ba43ddf4d94638a970b84775f4788ac"')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "p2pkh": {\n      "equals": "mr1iPkD9N3RJZZxXRk7xF9d36gffa6exNC"\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"p2pkh"),"(Pay-to-Public-Key-Hash) is a Bitcoin transaction output script type that allows users to send funds to a recipient's hashed public key, providing security and privacy by concealing the actual public key."),(0,i.kt)("p",null,"Get any transaction including a p2sh output paying a given recipient ",(0,i.kt)("inlineCode",{parentName:"p"},"p2sh")," construct admits:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"p2sh")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'string type. Example: "2MxDJ723HBJtEMa2a9vcsns4qztxBuC8Zb2"'),(0,i.kt)("li",{parentName:"ul"},'hex encoded bytes type. Example: "0x76a914ee9369fb719c0ba43ddf4d94638a970b84775f4788ac"')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "p2sh": {\n      "equals": "2MxDJ723HBJtEMa2a9vcsns4qztxBuC8Zb2"\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"p2sh"),"(Pay-to-Script-Hash) is a Bitcoin transaction output script type that enables users to send funds to a script instead of a public key, allowing for more complex transaction conditions and multi-signature addresses."),(0,i.kt)("p",null,"Get any transaction, including a ",(0,i.kt)("inlineCode",{parentName:"p"},"p2wpkh")," output paying a given recipient:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"p2wpkh")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'string type. Example: "bcrt1qnxknq3wqtphv7sfwy07m7e4sr6ut9yt6ed99jg"')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "p2wpkh": {\n      "equals": "bcrt1qnxknq3wqtphv7sfwy07m7e4sr6ut9yt6ed99jg"\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"p2wpkh"),"(Pay-to-Witness-Public-Key-Hash) is a Bitcoin transaction output script type used in Segregated Witness (SegWit) that allows for more efficient and secure transactions by separating the witness data from the transaction data and storing it in a separate block."),(0,i.kt)("p",null,"Get any transaction, including a ",(0,i.kt)("inlineCode",{parentName:"p"},"p2wsh")," output paying a given recipient:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"p2wsh")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'string type. Example: "bc1qklpmx03a8qkv263gy8te36w0z9yafxplc5kwzc"')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "p2wsh": {\n      "equals": "bc1qklpmx03a8qkv263gy8te36w0z9yafxplc5kwzc"\n    }\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"p2wsh")," (Pay-to-Witness-Script-Hash) is a Bitcoin transaction output script type used in Segregated Witness (SegWit) that enables users to send funds to a hashed script, allowing for more complex transaction conditions and greater scalability by separating the script from the transaction data."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Wallet Descriptors")," provide a compact and semi-standardized method for describing how scripts and addresses within a wallet are generated. Chainhooks users that want to track addresses derived from an extended pubkey or a multisig-wallet for example, can now rely on this feature instead of defining one predicate per address.\nFor example if we wanted to track the first 3 addressed generated by the following descriptor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"wpkh(tprv8ZgxMBicQKsPePxn6j3TjvB2MBzQkuhGgc6oRh2WZancZQgxktcnjZJ44XdsRiw3jNkbVTK9JW6KFHvnRKgAMtSyuBevMJprSkZ4PTfmTgV/84'/1'/0'/0/*)\n")),(0,i.kt)("p",null,"which reads: describe a P2WPKH output with the specified extended public key, and produces these BIP84 addresses:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcrt1qzy2rdyvu8c57qd8exyyp0mw7dk5drsu9ewzdsu\nbcrt1qsfsjnagr29m8h3a3vdand2s85cg4cefkcwk2fy\nbcrt1qauewfytqe5mtr0xwp786r6fl39kmum2lr65kmj\n")),(0,i.kt)("p",null,"The following predicate should be defined:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "outputs",\n    "descriptor": {\n      "expression": "wpkh(tprv8ZgxMBicQKsPePxn6j3TjvB2MBzQkuhGgc6oRh2WZancZQgxktcnjZJ44XdsRiw3jNkbVTK9JW6KFHvnRKgAMtSyuBevMJprSkZ4PTfmTgV/84\'/1\'/0\'/0/*)",\n      "range": [0, 3]\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Get any Bitcoin transaction, including a Block commitment. Broadcasted payloads include ",(0,i.kt)("em",{parentName:"p"},"Proof of Transfer")," reward information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "stacks_protocol",\n    "operation": "block_committed"\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Proof of Transfer(PoT)")," is a blockchain consensus mechanism where participants prove ownership of assets outside the blockchain from another network and transfer them to the target blockchain to validate and secure transactions without relying solely on computational work or stake ownership."),(0,i.kt)("p",null,"Get any transaction, including a key registration operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "stacks_protocol",\n    "operation": "leader_registered"\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction, including an STX transfer operation:\n// Coming soon"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "stacks_protocol",\n    "operation": "stx_transferred"\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction, including an STX lock operation:\n// Coming soon"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "stacks_protocol",\n    "operation": "stx_locked"\n  }\n}\n')),(0,i.kt)("p",null,"Get any transaction including a new Ordinal inscription (inscription revealed and transferred)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "if_this": {\n    "scope": "ordinals_protocol",\n    "operation": "inscription_feed"\n  }\n}\n')),(0,i.kt)("h2",{id:"then_that-constructs"},(0,i.kt)("inlineCode",{parentName:"h2"},"then_that")," Constructs"),(0,i.kt)("p",null,"The following ",(0,i.kt)("inlineCode",{parentName:"p"},"then_that")," constructs are supported:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"HTTP Post")," block/transaction payload to a given endpoint:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"http_post")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"url (string type). Example: ",(0,i.kt)("inlineCode",{parentName:"li"},"http://localhost:3000/api/v1/wrapBtc")),(0,i.kt)("li",{parentName:"ul"},"authorization_header (string type). Secret to add to the request ",(0,i.kt)("inlineCode",{parentName:"li"},"authorization")," header when posting payloads")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "then_that": {\n    "http_post": {\n      "url": "http://localhost:3000/api/v1/wrapBtc",\n      "authorization_header": "Bearer cn389ncoiwuencr"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Append events to a file through the filesystem. Convenient for local tests:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_append")," construct admits:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"path (string type). Path to the file on disk.")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsonc"},'{\n  "then_that": {\n    "file_append": {\n      "path": "/tmp/events.json"\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"additional-configuration-knobs-available"},"Additional configuration knobs available"),(0,i.kt)("p",null,"The following additional configurations can be used to improve the performance of Chainhook by preventing a full scan of the blockchain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ignore any block before the given block:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"start_block": 101'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Ignore any block after the given block:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"end_block": 201'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Stop evaluating chainhook after a given number of occurrences found:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"expire_after_occurrence": 1'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Don't include proofs:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"include_proof": false'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Don't include Bitcoin transaction inputs in the payload:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"include_inputs": false'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Don't include Bitcoin transaction outputs in the payload:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"include_outputs": false'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Don't include Bitcoin transaction witnesses in the payload:\n",(0,i.kt)("inlineCode",{parentName:"p"},'"include_witness": false')))),(0,i.kt)("h2",{id:"example-predicate-definition-to-post-first-five-transfers"},"Example predicate definition to post first five transfers"),(0,i.kt)("p",null,"Retrieve and HTTP Post to ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/api/v1/wrapBtc")," the five first transfers to the p2wpkh ",(0,i.kt)("inlineCode",{parentName:"p"},"bcrt1qnxk...yt6ed99jg")," address of any amount, occurring after block height 10200."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE:"))),(0,i.kt)("p",{parentName:"blockquote"},"The start_block is mandatory to post events using ",(0,i.kt)("inlineCode",{parentName:"p"},"http_post")," ",(0,i.kt)("inlineCode",{parentName:"p"},"then-that")," predicate.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chain": "bitcoin",\n  "uuid": "1",\n  "name": "Wrap BTC",\n  "version": 1,\n  "networks": {\n    "testnet": {\n      "if_this": {\n        "scope": "outputs",\n        "p2wpkh": {\n          "equals": "bcrt1qnxknq3wqtphv7sfwy07m7e4sr6ut9yt6ed99jg"\n        }\n      },\n      "then_that": {\n        "http_post": {\n          "url": "http://localhost:3000/api/v1/transfers",\n          "authorization_header": "Bearer cn389ncoiwuencr"\n        }\n      },\n      "start_block": 10200,\n      "expire_after_occurrence": 5 // only prints the first 5 characters\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"example-predicate-with-multiple-networks"},"Example predicate with multiple networks"),(0,i.kt)("p",null,"A specification file can also include different networks. In this case, the Chainhook will select the predicate corresponding to the network it was launched against. In the below example, the testnet and mainnet are two different networks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chain": "bitcoin",\n  "uuid": "1",\n  "name": "Wrap BTC",\n  "version": 1,\n  "networks": {\n    "testnet": {\n      "if_this": {\n        "scope": "ordinals_protocol",\n        "operation": "inscription_feed"\n      },\n      "then_that": {\n        "http_post": {\n          "url": "http://localhost:3000/api/v1/ordinals",\n          "authorization_header": "Bearer cn389ncoiwuencr"\n        }\n      },\n      "start_block": 10200\n    },\n    "mainnet": {\n      "if_this": {\n        "scope": "ordinals_protocol",\n        "operation": "inscription_feed"\n      },\n      "then_that": {\n        "http_post": {\n          "url": "http://my-protocol.xyz/api/v1/ordinals",\n          "authorization_header": "Bearer cn389ncoiwuencr"\n        }\n      },\n      "start_block": 90232\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);